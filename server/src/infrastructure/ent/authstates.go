// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Doer-org/google-cloud-challenge-2022/infrastructure/ent/authstates"
)

// AuthStates is the model entity for the AuthStates schema.
type AuthStates struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// State holds the value of the "state" field.
	State string `json:"state,omitempty"`
	// RedirectURL holds the value of the "redirect_url" field.
	RedirectURL string `json:"redirect_url,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AuthStates) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case authstates.FieldID:
			values[i] = new(sql.NullInt64)
		case authstates.FieldState, authstates.FieldRedirectURL:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AuthStates", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AuthStates fields.
func (as *AuthStates) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case authstates.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			as.ID = int(value.Int64)
		case authstates.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				as.State = value.String
			}
		case authstates.FieldRedirectURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field redirect_url", values[i])
			} else if value.Valid {
				as.RedirectURL = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AuthStates.
// Note that you need to call AuthStates.Unwrap() before calling this method if this AuthStates
// was returned from a transaction, and the transaction was committed or rolled back.
func (as *AuthStates) Update() *AuthStatesUpdateOne {
	return (&AuthStatesClient{config: as.config}).UpdateOne(as)
}

// Unwrap unwraps the AuthStates entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (as *AuthStates) Unwrap() *AuthStates {
	_tx, ok := as.config.driver.(*txDriver)
	if !ok {
		panic("ent: AuthStates is not a transactional entity")
	}
	as.config.driver = _tx.drv
	return as
}

// String implements the fmt.Stringer.
func (as *AuthStates) String() string {
	var builder strings.Builder
	builder.WriteString("AuthStates(")
	builder.WriteString(fmt.Sprintf("id=%v, ", as.ID))
	builder.WriteString("state=")
	builder.WriteString(as.State)
	builder.WriteString(", ")
	builder.WriteString("redirect_url=")
	builder.WriteString(as.RedirectURL)
	builder.WriteByte(')')
	return builder.String()
}

// AuthStatesSlice is a parsable slice of AuthStates.
type AuthStatesSlice []*AuthStates

func (as AuthStatesSlice) config(cfg config) {
	for _i := range as {
		as[_i].config = cfg
	}
}
