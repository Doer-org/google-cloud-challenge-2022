// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Doer-org/google-cloud-challenge-2022/infrastructure/ent/etype"
	"github.com/Doer-org/google-cloud-challenge-2022/infrastructure/ent/event"
)

// EType is the model entity for the EType schema.
type EType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ETypeQuery when eager-loading is set.
	Edges      ETypeEdges `json:"edges"`
	event_type *int
}

// ETypeEdges holds the relations/edges for other nodes in the graph.
type ETypeEdges struct {
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ETypeEdges) EventOrErr() (*Event, error) {
	if e.loadedTypes[0] {
		if e.Event == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: event.Label}
		}
		return e.Event, nil
	}
	return nil, &NotLoadedError{edge: "event"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case etype.FieldID:
			values[i] = new(sql.NullInt64)
		case etype.FieldName:
			values[i] = new(sql.NullString)
		case etype.ForeignKeys[0]: // event_type
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type EType", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EType fields.
func (e *EType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case etype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case etype.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				e.Name = value.String
			}
		case etype.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field event_type", value)
			} else if value.Valid {
				e.event_type = new(int)
				*e.event_type = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryEvent queries the "event" edge of the EType entity.
func (e *EType) QueryEvent() *EventQuery {
	return (&ETypeClient{config: e.config}).QueryEvent(e)
}

// Update returns a builder for updating this EType.
// Note that you need to call EType.Unwrap() before calling this method if this EType
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *EType) Update() *ETypeUpdateOne {
	return (&ETypeClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the EType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *EType) Unwrap() *EType {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: EType is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *EType) String() string {
	var builder strings.Builder
	builder.WriteString("EType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("name=")
	builder.WriteString(e.Name)
	builder.WriteByte(')')
	return builder.String()
}

// ETypes is a parsable slice of EType.
type ETypes []*EType

func (e ETypes) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
