// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateEState implements createEState operation.
	//
	// Creates a new EState and persists it to storage.
	//
	// POST /e-states
	CreateEState(ctx context.Context, req *CreateEStateReq) (CreateEStateRes, error)
	// CreateEType implements createEType operation.
	//
	// Creates a new EType and persists it to storage.
	//
	// POST /e-types
	CreateEType(ctx context.Context, req *CreateETypeReq) (CreateETypeRes, error)
	// CreateEcomment implements createEcomment operation.
	//
	// Creates a new Ecomment and persists it to storage.
	//
	// POST /ecomments
	CreateEcomment(ctx context.Context, req *CreateEcommentReq) (CreateEcommentRes, error)
	// CreateEvent implements createEvent operation.
	//
	// Creates a new Event and persists it to storage.
	//
	// POST /events
	CreateEvent(ctx context.Context, req *CreateEventReq) (CreateEventRes, error)
	// CreateUser implements createUser operation.
	//
	// Creates a new User and persists it to storage.
	//
	// POST /users
	CreateUser(ctx context.Context, req *CreateUserReq) (CreateUserRes, error)
	// DeleteEState implements deleteEState operation.
	//
	// Deletes the EState with the requested ID.
	//
	// DELETE /e-states/{id}
	DeleteEState(ctx context.Context, params DeleteEStateParams) (DeleteEStateRes, error)
	// DeleteEType implements deleteEType operation.
	//
	// Deletes the EType with the requested ID.
	//
	// DELETE /e-types/{id}
	DeleteEType(ctx context.Context, params DeleteETypeParams) (DeleteETypeRes, error)
	// DeleteEcomment implements deleteEcomment operation.
	//
	// Deletes the Ecomment with the requested ID.
	//
	// DELETE /ecomments/{id}
	DeleteEcomment(ctx context.Context, params DeleteEcommentParams) (DeleteEcommentRes, error)
	// DeleteEvent implements deleteEvent operation.
	//
	// Deletes the Event with the requested ID.
	//
	// DELETE /events/{id}
	DeleteEvent(ctx context.Context, params DeleteEventParams) (DeleteEventRes, error)
	// DeleteUser implements deleteUser operation.
	//
	// Deletes the User with the requested ID.
	//
	// DELETE /users/{id}
	DeleteUser(ctx context.Context, params DeleteUserParams) (DeleteUserRes, error)
	// ListEState implements listEState operation.
	//
	// List EStates.
	//
	// GET /e-states
	ListEState(ctx context.Context, params ListEStateParams) (ListEStateRes, error)
	// ListEType implements listEType operation.
	//
	// List ETypes.
	//
	// GET /e-types
	ListEType(ctx context.Context, params ListETypeParams) (ListETypeRes, error)
	// ListEcomment implements listEcomment operation.
	//
	// List Ecomments.
	//
	// GET /ecomments
	ListEcomment(ctx context.Context, params ListEcommentParams) (ListEcommentRes, error)
	// ListEvent implements listEvent operation.
	//
	// List Events.
	//
	// GET /events
	ListEvent(ctx context.Context, params ListEventParams) (ListEventRes, error)
	// ListEventUsers implements listEventUsers operation.
	//
	// List attached Users.
	//
	// GET /events/{id}/users
	ListEventUsers(ctx context.Context, params ListEventUsersParams) (ListEventUsersRes, error)
	// ListUser implements listUser operation.
	//
	// List Users.
	//
	// GET /users
	ListUser(ctx context.Context, params ListUserParams) (ListUserRes, error)
	// ListUserEvents implements listUserEvents operation.
	//
	// List attached Events.
	//
	// GET /users/{id}/events
	ListUserEvents(ctx context.Context, params ListUserEventsParams) (ListUserEventsRes, error)
	// ReadEState implements readEState operation.
	//
	// Finds the EState with the requested ID and returns it.
	//
	// GET /e-states/{id}
	ReadEState(ctx context.Context, params ReadEStateParams) (ReadEStateRes, error)
	// ReadEStateEvent implements readEStateEvent operation.
	//
	// Find the attached Event of the EState with the given ID.
	//
	// GET /e-states/{id}/event
	ReadEStateEvent(ctx context.Context, params ReadEStateEventParams) (ReadEStateEventRes, error)
	// ReadEType implements readEType operation.
	//
	// Finds the EType with the requested ID and returns it.
	//
	// GET /e-types/{id}
	ReadEType(ctx context.Context, params ReadETypeParams) (ReadETypeRes, error)
	// ReadETypeEvent implements readETypeEvent operation.
	//
	// Find the attached Event of the EType with the given ID.
	//
	// GET /e-types/{id}/event
	ReadETypeEvent(ctx context.Context, params ReadETypeEventParams) (ReadETypeEventRes, error)
	// ReadEcomment implements readEcomment operation.
	//
	// Finds the Ecomment with the requested ID and returns it.
	//
	// GET /ecomments/{id}
	ReadEcomment(ctx context.Context, params ReadEcommentParams) (ReadEcommentRes, error)
	// ReadEcommentEvent implements readEcommentEvent operation.
	//
	// Find the attached Event of the Ecomment with the given ID.
	//
	// GET /ecomments/{id}/event
	ReadEcommentEvent(ctx context.Context, params ReadEcommentEventParams) (ReadEcommentEventRes, error)
	// ReadEcommentUser implements readEcommentUser operation.
	//
	// Find the attached User of the Ecomment with the given ID.
	//
	// GET /ecomments/{id}/user
	ReadEcommentUser(ctx context.Context, params ReadEcommentUserParams) (ReadEcommentUserRes, error)
	// ReadEvent implements readEvent operation.
	//
	// Finds the Event with the requested ID and returns it.
	//
	// GET /events/{id}
	ReadEvent(ctx context.Context, params ReadEventParams) (ReadEventRes, error)
	// ReadEventAdmin implements readEventAdmin operation.
	//
	// Find the attached User of the Event with the given ID.
	//
	// GET /events/{id}/admin
	ReadEventAdmin(ctx context.Context, params ReadEventAdminParams) (ReadEventAdminRes, error)
	// ReadEventState implements readEventState operation.
	//
	// Find the attached EState of the Event with the given ID.
	//
	// GET /events/{id}/state
	ReadEventState(ctx context.Context, params ReadEventStateParams) (ReadEventStateRes, error)
	// ReadEventType implements readEventType operation.
	//
	// Find the attached EType of the Event with the given ID.
	//
	// GET /events/{id}/type
	ReadEventType(ctx context.Context, params ReadEventTypeParams) (ReadEventTypeRes, error)
	// ReadUser implements readUser operation.
	//
	// Finds the User with the requested ID and returns it.
	//
	// GET /users/{id}
	ReadUser(ctx context.Context, params ReadUserParams) (ReadUserRes, error)
	// UpdateEState implements updateEState operation.
	//
	// Updates a EState and persists changes to storage.
	//
	// PATCH /e-states/{id}
	UpdateEState(ctx context.Context, req *UpdateEStateReq, params UpdateEStateParams) (UpdateEStateRes, error)
	// UpdateEType implements updateEType operation.
	//
	// Updates a EType and persists changes to storage.
	//
	// PATCH /e-types/{id}
	UpdateEType(ctx context.Context, req *UpdateETypeReq, params UpdateETypeParams) (UpdateETypeRes, error)
	// UpdateEcomment implements updateEcomment operation.
	//
	// Updates a Ecomment and persists changes to storage.
	//
	// PATCH /ecomments/{id}
	UpdateEcomment(ctx context.Context, req *UpdateEcommentReq, params UpdateEcommentParams) (UpdateEcommentRes, error)
	// UpdateEvent implements updateEvent operation.
	//
	// Updates a Event and persists changes to storage.
	//
	// PATCH /events/{id}
	UpdateEvent(ctx context.Context, req *UpdateEventReq, params UpdateEventParams) (UpdateEventRes, error)
	// UpdateUser implements updateUser operation.
	//
	// Updates a User and persists changes to storage.
	//
	// PATCH /users/{id}
	UpdateUser(ctx context.Context, req *UpdateUserReq, params UpdateUserParams) (UpdateUserRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
