// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/Doer-org/google-cloud-challenge-2022/infrastructure/ent/authstates"
	"github.com/Doer-org/google-cloud-challenge-2022/infrastructure/ent/comment"
	"github.com/Doer-org/google-cloud-challenge-2022/infrastructure/ent/event"
	"github.com/Doer-org/google-cloud-challenge-2022/infrastructure/ent/googleauth"
	"github.com/Doer-org/google-cloud-challenge-2022/infrastructure/ent/loginsessions"
	"github.com/Doer-org/google-cloud-challenge-2022/infrastructure/ent/schema"
	"github.com/Doer-org/google-cloud-challenge-2022/infrastructure/ent/user"
	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	authstatesFields := schema.AuthStates{}.Fields()
	_ = authstatesFields
	// authstatesDescState is the schema descriptor for state field.
	authstatesDescState := authstatesFields[0].Descriptor()
	// authstates.StateValidator is a validator for the "state" field. It is called by the builders before save.
	authstates.StateValidator = func() func(string) error {
		validators := authstatesDescState.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(state string) error {
			for _, fn := range fns {
				if err := fn(state); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// authstatesDescRedirectURL is the schema descriptor for redirect_url field.
	authstatesDescRedirectURL := authstatesFields[1].Descriptor()
	// authstates.RedirectURLValidator is a validator for the "redirect_url" field. It is called by the builders before save.
	authstates.RedirectURLValidator = authstatesDescRedirectURL.Validators[0].(func(string) error)
	commentFields := schema.Comment{}.Fields()
	_ = commentFields
	// commentDescBody is the schema descriptor for body field.
	commentDescBody := commentFields[1].Descriptor()
	// comment.BodyValidator is a validator for the "body" field. It is called by the builders before save.
	comment.BodyValidator = commentDescBody.Validators[0].(func(string) error)
	// commentDescID is the schema descriptor for id field.
	commentDescID := commentFields[0].Descriptor()
	// comment.DefaultID holds the default value on creation for the id field.
	comment.DefaultID = commentDescID.Default.(func() uuid.UUID)
	eventFields := schema.Event{}.Fields()
	_ = eventFields
	// eventDescName is the schema descriptor for name field.
	eventDescName := eventFields[1].Descriptor()
	// event.NameValidator is a validator for the "name" field. It is called by the builders before save.
	event.NameValidator = func() func(string) error {
		validators := eventDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// eventDescDetail is the schema descriptor for detail field.
	eventDescDetail := eventFields[2].Descriptor()
	// event.DetailValidator is a validator for the "detail" field. It is called by the builders before save.
	event.DetailValidator = eventDescDetail.Validators[0].(func(string) error)
	// eventDescLocation is the schema descriptor for location field.
	eventDescLocation := eventFields[3].Descriptor()
	// event.LocationValidator is a validator for the "location" field. It is called by the builders before save.
	event.LocationValidator = eventDescLocation.Validators[0].(func(string) error)
	// eventDescSize is the schema descriptor for size field.
	eventDescSize := eventFields[4].Descriptor()
	// event.SizeValidator is a validator for the "size" field. It is called by the builders before save.
	event.SizeValidator = func() func(int) error {
		validators := eventDescSize.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(size int) error {
			for _, fn := range fns {
				if err := fn(size); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// eventDescCreatedAt is the schema descriptor for created_at field.
	eventDescCreatedAt := eventFields[5].Descriptor()
	// event.DefaultCreatedAt holds the default value on creation for the created_at field.
	event.DefaultCreatedAt = eventDescCreatedAt.Default.(func() time.Time)
	// eventDescType is the schema descriptor for type field.
	eventDescType := eventFields[7].Descriptor()
	// event.TypeValidator is a validator for the "type" field. It is called by the builders before save.
	event.TypeValidator = func() func(string) error {
		validators := eventDescType.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(_type string) error {
			for _, fn := range fns {
				if err := fn(_type); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// eventDescState is the schema descriptor for state field.
	eventDescState := eventFields[8].Descriptor()
	// event.StateValidator is a validator for the "state" field. It is called by the builders before save.
	event.StateValidator = func() func(string) error {
		validators := eventDescState.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(state string) error {
			for _, fn := range fns {
				if err := fn(state); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// eventDescID is the schema descriptor for id field.
	eventDescID := eventFields[0].Descriptor()
	// event.DefaultID holds the default value on creation for the id field.
	event.DefaultID = eventDescID.Default.(func() uuid.UUID)
	googleauthFields := schema.GoogleAuth{}.Fields()
	_ = googleauthFields
	// googleauthDescUserID is the schema descriptor for user_id field.
	googleauthDescUserID := googleauthFields[0].Descriptor()
	// googleauth.DefaultUserID holds the default value on creation for the user_id field.
	googleauth.DefaultUserID = googleauthDescUserID.Default.(func() uuid.UUID)
	// googleauthDescAccessToken is the schema descriptor for access_token field.
	googleauthDescAccessToken := googleauthFields[1].Descriptor()
	// googleauth.AccessTokenValidator is a validator for the "access_token" field. It is called by the builders before save.
	googleauth.AccessTokenValidator = googleauthDescAccessToken.Validators[0].(func(string) error)
	// googleauthDescRefreshToken is the schema descriptor for refresh_token field.
	googleauthDescRefreshToken := googleauthFields[2].Descriptor()
	// googleauth.RefreshTokenValidator is a validator for the "refresh_token" field. It is called by the builders before save.
	googleauth.RefreshTokenValidator = googleauthDescRefreshToken.Validators[0].(func(string) error)
	loginsessionsFields := schema.LoginSessions{}.Fields()
	_ = loginsessionsFields
	// loginsessionsDescUserID is the schema descriptor for user_id field.
	loginsessionsDescUserID := loginsessionsFields[1].Descriptor()
	// loginsessions.DefaultUserID holds the default value on creation for the user_id field.
	loginsessions.DefaultUserID = loginsessionsDescUserID.Default.(func() uuid.UUID)
	// loginsessionsDescID is the schema descriptor for id field.
	loginsessionsDescID := loginsessionsFields[0].Descriptor()
	// loginsessions.IDValidator is a validator for the "id" field. It is called by the builders before save.
	loginsessions.IDValidator = func() func(string) error {
		validators := loginsessionsDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[1].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = func() func(string) error {
		validators := userDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescAuthenticated is the schema descriptor for authenticated field.
	userDescAuthenticated := userFields[2].Descriptor()
	// user.DefaultAuthenticated holds the default value on creation for the authenticated field.
	user.DefaultAuthenticated = userDescAuthenticated.Default.(bool)
	// userDescMail is the schema descriptor for mail field.
	userDescMail := userFields[3].Descriptor()
	// user.MailValidator is a validator for the "mail" field. It is called by the builders before save.
	user.MailValidator = userDescMail.Validators[0].(func(string) error)
	// userDescIcon is the schema descriptor for icon field.
	userDescIcon := userFields[4].Descriptor()
	// user.IconValidator is a validator for the "icon" field. It is called by the builders before save.
	user.IconValidator = userDescIcon.Validators[0].(func(string) error)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
}
