{
  "openapi": "3.0.3",
  "info": {
    "title": "Ent Schema API",
    "description": "This is an auto generated API description made out of an Ent schema definition",
    "version": "0.1.0"
  },
  "paths": {
    "/e-states": {
      "get": {
        "tags": [
          "EState"
        ],
        "summary": "List EStates",
        "description": "List EStates.",
        "operationId": "listEState",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result EState list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EStateList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "EState"
        ],
        "summary": "Create a new EState",
        "description": "Creates a new EState and persists it to storage.",
        "operationId": "createEState",
        "requestBody": {
          "description": "EState to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "event": {
                    "type": "integer"
                  }
                },
                "required": [
                  "name",
                  "event"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "EState created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EStateCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/e-states/{id}": {
      "get": {
        "tags": [
          "EState"
        ],
        "summary": "Find a EState by ID",
        "description": "Finds the EState with the requested ID and returns it.",
        "operationId": "readEState",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the EState",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "EState with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EStateRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "EState"
        ],
        "summary": "Deletes a EState by ID",
        "description": "Deletes the EState with the requested ID.",
        "operationId": "deleteEState",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the EState",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "EState with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "EState"
        ],
        "summary": "Updates a EState",
        "description": "Updates a EState and persists changes to storage.",
        "operationId": "updateEState",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the EState",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "EState properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "event": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "EState updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EStateUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/e-states/{id}/event": {
      "get": {
        "tags": [
          "EState"
        ],
        "summary": "Find the attached Event",
        "description": "Find the attached Event of the EState with the given ID",
        "operationId": "readEStateEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the EState",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event attached to EState with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EState_EventRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/e-types": {
      "get": {
        "tags": [
          "EType"
        ],
        "summary": "List ETypes",
        "description": "List ETypes.",
        "operationId": "listEType",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result EType list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ETypeList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "EType"
        ],
        "summary": "Create a new EType",
        "description": "Creates a new EType and persists it to storage.",
        "operationId": "createEType",
        "requestBody": {
          "description": "EType to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "event": {
                    "type": "integer"
                  }
                },
                "required": [
                  "name",
                  "event"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "EType created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ETypeCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/e-types/{id}": {
      "get": {
        "tags": [
          "EType"
        ],
        "summary": "Find a EType by ID",
        "description": "Finds the EType with the requested ID and returns it.",
        "operationId": "readEType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the EType",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "EType with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ETypeRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "EType"
        ],
        "summary": "Deletes a EType by ID",
        "description": "Deletes the EType with the requested ID.",
        "operationId": "deleteEType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the EType",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "EType with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "EType"
        ],
        "summary": "Updates a EType",
        "description": "Updates a EType and persists changes to storage.",
        "operationId": "updateEType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the EType",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "EType properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "event": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "EType updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ETypeUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/e-types/{id}/event": {
      "get": {
        "tags": [
          "EType"
        ],
        "summary": "Find the attached Event",
        "description": "Find the attached Event of the EType with the given ID",
        "operationId": "readETypeEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the EType",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event attached to EType with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EType_EventRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/events": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "List Events",
        "description": "List Events.",
        "operationId": "listEvent",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Event list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Event"
        ],
        "summary": "Create a new Event",
        "description": "Creates a new Event and persists it to storage.",
        "operationId": "createEvent",
        "requestBody": {
          "description": "Event to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "detail": {
                    "type": "string"
                  },
                  "location": {
                    "type": "string"
                  },
                  "state": {
                    "type": "integer"
                  },
                  "type": {
                    "type": "integer"
                  },
                  "users": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                },
                "required": [
                  "name",
                  "detail",
                  "location"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Event created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/events/{id}": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Find a Event by ID",
        "description": "Finds the Event with the requested ID and returns it.",
        "operationId": "readEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Event",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Event"
        ],
        "summary": "Deletes a Event by ID",
        "description": "Deletes the Event with the requested ID.",
        "operationId": "deleteEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Event",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Event with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Event"
        ],
        "summary": "Updates a Event",
        "description": "Updates a Event and persists changes to storage.",
        "operationId": "updateEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Event",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Event properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "detail": {
                    "type": "string"
                  },
                  "location": {
                    "type": "string"
                  },
                  "state": {
                    "type": "integer"
                  },
                  "type": {
                    "type": "integer"
                  },
                  "users": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Event updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/events/{id}/state": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Find the attached EState",
        "description": "Find the attached EState of the Event with the given ID",
        "operationId": "readEventState",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Event",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "EState attached to Event with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event_StateRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/events/{id}/type": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Find the attached EType",
        "description": "Find the attached EType of the Event with the given ID",
        "operationId": "readEventType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Event",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "EType attached to Event with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event_TypeRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/events/{id}/users": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "List attached Users",
        "description": "List attached Users.",
        "operationId": "listEventUsers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Event",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Events list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event_UsersList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List Users",
        "description": "List Users.",
        "operationId": "listUser",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result User list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a new User",
        "description": "Creates a new User and persists it to storage.",
        "operationId": "createUser",
        "requestBody": {
          "description": "User to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "age": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  },
                  "authenticated": {
                    "type": "boolean"
                  },
                  "gmail": {
                    "type": "string"
                  },
                  "icon_img": {
                    "type": "string"
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                },
                "required": [
                  "age",
                  "name",
                  "authenticated",
                  "gmail",
                  "icon_img"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Find a User by ID",
        "description": "Finds the User with the requested ID and returns it.",
        "operationId": "readUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Deletes a User by ID",
        "description": "Deletes the User with the requested ID.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Updates a User",
        "description": "Updates a User and persists changes to storage.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "User properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "age": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  },
                  "authenticated": {
                    "type": "boolean"
                  },
                  "gmail": {
                    "type": "string"
                  },
                  "icon_img": {
                    "type": "string"
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/events": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached Events",
        "description": "List attached Events.",
        "operationId": "listUserEvents",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User_EventsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "EState": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "event": {
            "$ref": "#/components/schemas/Event"
          }
        },
        "required": [
          "id",
          "name",
          "event"
        ]
      },
      "EStateCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "EStateList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "EStateRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "EStateUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "EState_EventRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          },
          "location": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "detail",
          "location"
        ]
      },
      "EType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "event": {
            "$ref": "#/components/schemas/Event"
          }
        },
        "required": [
          "id",
          "name",
          "event"
        ]
      },
      "ETypeCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "ETypeList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "ETypeRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "ETypeUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "EType_EventRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          },
          "location": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "detail",
          "location"
        ]
      },
      "Event": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/EState"
          },
          "type": {
            "$ref": "#/components/schemas/EType"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        },
        "required": [
          "id",
          "name",
          "detail",
          "location"
        ]
      },
      "EventCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          },
          "location": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "detail",
          "location"
        ]
      },
      "EventList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          },
          "location": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "detail",
          "location"
        ]
      },
      "EventRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          },
          "location": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "detail",
          "location"
        ]
      },
      "EventUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          },
          "location": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "detail",
          "location"
        ]
      },
      "Event_StateRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "Event_TypeRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "Event_UsersList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "age": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "authenticated": {
            "type": "boolean"
          },
          "gmail": {
            "type": "string"
          },
          "icon_img": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "age",
          "name",
          "authenticated",
          "gmail",
          "icon_img"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "age": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "authenticated": {
            "type": "boolean"
          },
          "gmail": {
            "type": "string"
          },
          "icon_img": {
            "type": "string"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          }
        },
        "required": [
          "id",
          "age",
          "name",
          "authenticated",
          "gmail",
          "icon_img"
        ]
      },
      "UserCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "age": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "authenticated": {
            "type": "boolean"
          },
          "gmail": {
            "type": "string"
          },
          "icon_img": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "age",
          "name",
          "authenticated",
          "gmail",
          "icon_img"
        ]
      },
      "UserList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "age": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "authenticated": {
            "type": "boolean"
          },
          "gmail": {
            "type": "string"
          },
          "icon_img": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "age",
          "name",
          "authenticated",
          "gmail",
          "icon_img"
        ]
      },
      "UserRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "age": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "authenticated": {
            "type": "boolean"
          },
          "gmail": {
            "type": "string"
          },
          "icon_img": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "age",
          "name",
          "authenticated",
          "gmail",
          "icon_img"
        ]
      },
      "UserUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "age": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "authenticated": {
            "type": "boolean"
          },
          "gmail": {
            "type": "string"
          },
          "icon_img": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "age",
          "name",
          "authenticated",
          "gmail",
          "icon_img"
        ]
      },
      "User_EventsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          },
          "location": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "detail",
          "location"
        ]
      }
    },
    "responses": {
      "400": {
        "description": "invalid input, data invalid",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "403": {
        "description": "insufficient permissions",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "404": {
        "description": "resource not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "409": {
        "description": "conflicting resources",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "500": {
        "description": "unexpected error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      }
    }
  }
}