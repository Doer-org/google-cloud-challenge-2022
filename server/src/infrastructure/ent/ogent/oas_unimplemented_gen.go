// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"context"

	ht "github.com/ogen-go/ogen/http"
)

// UnimplementedHandler is no-op Handler which returns http.ErrNotImplemented.
type UnimplementedHandler struct{}

var _ Handler = UnimplementedHandler{}

// CreateEState implements createEState operation.
//
// Creates a new EState and persists it to storage.
//
// POST /e-states
func (UnimplementedHandler) CreateEState(ctx context.Context, req *CreateEStateReq) (r CreateEStateRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateEType implements createEType operation.
//
// Creates a new EType and persists it to storage.
//
// POST /e-types
func (UnimplementedHandler) CreateEType(ctx context.Context, req *CreateETypeReq) (r CreateETypeRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateEvent implements createEvent operation.
//
// Creates a new Event and persists it to storage.
//
// POST /events
func (UnimplementedHandler) CreateEvent(ctx context.Context, req *CreateEventReq) (r CreateEventRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateUser implements createUser operation.
//
// Creates a new User and persists it to storage.
//
// POST /users
func (UnimplementedHandler) CreateUser(ctx context.Context, req *CreateUserReq) (r CreateUserRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteEState implements deleteEState operation.
//
// Deletes the EState with the requested ID.
//
// DELETE /e-states/{id}
func (UnimplementedHandler) DeleteEState(ctx context.Context, params DeleteEStateParams) (r DeleteEStateRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteEType implements deleteEType operation.
//
// Deletes the EType with the requested ID.
//
// DELETE /e-types/{id}
func (UnimplementedHandler) DeleteEType(ctx context.Context, params DeleteETypeParams) (r DeleteETypeRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteEvent implements deleteEvent operation.
//
// Deletes the Event with the requested ID.
//
// DELETE /events/{id}
func (UnimplementedHandler) DeleteEvent(ctx context.Context, params DeleteEventParams) (r DeleteEventRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteUser implements deleteUser operation.
//
// Deletes the User with the requested ID.
//
// DELETE /users/{id}
func (UnimplementedHandler) DeleteUser(ctx context.Context, params DeleteUserParams) (r DeleteUserRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ListEState implements listEState operation.
//
// List EStates.
//
// GET /e-states
func (UnimplementedHandler) ListEState(ctx context.Context, params ListEStateParams) (r ListEStateRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ListEType implements listEType operation.
//
// List ETypes.
//
// GET /e-types
func (UnimplementedHandler) ListEType(ctx context.Context, params ListETypeParams) (r ListETypeRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ListEvent implements listEvent operation.
//
// List Events.
//
// GET /events
func (UnimplementedHandler) ListEvent(ctx context.Context, params ListEventParams) (r ListEventRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ListEventUsers implements listEventUsers operation.
//
// List attached Users.
//
// GET /events/{id}/users
func (UnimplementedHandler) ListEventUsers(ctx context.Context, params ListEventUsersParams) (r ListEventUsersRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ListUser implements listUser operation.
//
// List Users.
//
// GET /users
func (UnimplementedHandler) ListUser(ctx context.Context, params ListUserParams) (r ListUserRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ListUserEvents implements listUserEvents operation.
//
// List attached Events.
//
// GET /users/{id}/events
func (UnimplementedHandler) ListUserEvents(ctx context.Context, params ListUserEventsParams) (r ListUserEventsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ReadEState implements readEState operation.
//
// Finds the EState with the requested ID and returns it.
//
// GET /e-states/{id}
func (UnimplementedHandler) ReadEState(ctx context.Context, params ReadEStateParams) (r ReadEStateRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ReadEStateEvent implements readEStateEvent operation.
//
// Find the attached Event of the EState with the given ID.
//
// GET /e-states/{id}/event
func (UnimplementedHandler) ReadEStateEvent(ctx context.Context, params ReadEStateEventParams) (r ReadEStateEventRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ReadEType implements readEType operation.
//
// Finds the EType with the requested ID and returns it.
//
// GET /e-types/{id}
func (UnimplementedHandler) ReadEType(ctx context.Context, params ReadETypeParams) (r ReadETypeRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ReadETypeEvent implements readETypeEvent operation.
//
// Find the attached Event of the EType with the given ID.
//
// GET /e-types/{id}/event
func (UnimplementedHandler) ReadETypeEvent(ctx context.Context, params ReadETypeEventParams) (r ReadETypeEventRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ReadEvent implements readEvent operation.
//
// Finds the Event with the requested ID and returns it.
//
// GET /events/{id}
func (UnimplementedHandler) ReadEvent(ctx context.Context, params ReadEventParams) (r ReadEventRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ReadEventState implements readEventState operation.
//
// Find the attached EState of the Event with the given ID.
//
// GET /events/{id}/state
func (UnimplementedHandler) ReadEventState(ctx context.Context, params ReadEventStateParams) (r ReadEventStateRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ReadEventType implements readEventType operation.
//
// Find the attached EType of the Event with the given ID.
//
// GET /events/{id}/type
func (UnimplementedHandler) ReadEventType(ctx context.Context, params ReadEventTypeParams) (r ReadEventTypeRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ReadUser implements readUser operation.
//
// Finds the User with the requested ID and returns it.
//
// GET /users/{id}
func (UnimplementedHandler) ReadUser(ctx context.Context, params ReadUserParams) (r ReadUserRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateEState implements updateEState operation.
//
// Updates a EState and persists changes to storage.
//
// PATCH /e-states/{id}
func (UnimplementedHandler) UpdateEState(ctx context.Context, req *UpdateEStateReq, params UpdateEStateParams) (r UpdateEStateRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateEType implements updateEType operation.
//
// Updates a EType and persists changes to storage.
//
// PATCH /e-types/{id}
func (UnimplementedHandler) UpdateEType(ctx context.Context, req *UpdateETypeReq, params UpdateETypeParams) (r UpdateETypeRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateEvent implements updateEvent operation.
//
// Updates a Event and persists changes to storage.
//
// PATCH /events/{id}
func (UnimplementedHandler) UpdateEvent(ctx context.Context, req *UpdateEventReq, params UpdateEventParams) (r UpdateEventRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateUser implements updateUser operation.
//
// Updates a User and persists changes to storage.
//
// PATCH /users/{id}
func (UnimplementedHandler) UpdateUser(ctx context.Context, req *UpdateUserReq, params UpdateUserParams) (r UpdateUserRes, _ error) {
	return r, ht.ErrNotImplemented
}
