// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Doer-org/google-cloud-challenge-2022/infrastructure/ent/estate"
	"github.com/Doer-org/google-cloud-challenge-2022/infrastructure/ent/event"
	"github.com/google/uuid"
)

// EState is the model entity for the EState schema.
type EState struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EStateQuery when eager-loading is set.
	Edges       EStateEdges `json:"edges"`
	event_state *uuid.UUID
}

// EStateEdges holds the relations/edges for other nodes in the graph.
type EStateEdges struct {
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EStateEdges) EventOrErr() (*Event, error) {
	if e.loadedTypes[0] {
		if e.Event == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: event.Label}
		}
		return e.Event, nil
	}
	return nil, &NotLoadedError{edge: "event"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EState) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case estate.FieldName:
			values[i] = new(sql.NullString)
		case estate.FieldID:
			values[i] = new(uuid.UUID)
		case estate.ForeignKeys[0]: // event_state
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type EState", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EState fields.
func (e *EState) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case estate.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				e.ID = *value
			}
		case estate.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				e.Name = value.String
			}
		case estate.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field event_state", values[i])
			} else if value.Valid {
				e.event_state = new(uuid.UUID)
				*e.event_state = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryEvent queries the "event" edge of the EState entity.
func (e *EState) QueryEvent() *EventQuery {
	return (&EStateClient{config: e.config}).QueryEvent(e)
}

// Update returns a builder for updating this EState.
// Note that you need to call EState.Unwrap() before calling this method if this EState
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *EState) Update() *EStateUpdateOne {
	return (&EStateClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the EState entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *EState) Unwrap() *EState {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: EState is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *EState) String() string {
	var builder strings.Builder
	builder.WriteString("EState(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("name=")
	builder.WriteString(e.Name)
	builder.WriteByte(')')
	return builder.String()
}

// EStates is a parsable slice of EState.
type EStates []*EState

func (e EStates) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
