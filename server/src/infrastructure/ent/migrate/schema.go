// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AuthStatesColumns holds the columns for the "auth_states" table.
	AuthStatesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "state", Type: field.TypeString, Size: 2000},
		{Name: "redirect_url", Type: field.TypeString, Nullable: true, Size: 300},
	}
	// AuthStatesTable holds the schema information for the "auth_states" table.
	AuthStatesTable = &schema.Table{
		Name:       "auth_states",
		Columns:    AuthStatesColumns,
		PrimaryKey: []*schema.Column{AuthStatesColumns[0]},
	}
	// CommentsColumns holds the columns for the "comments" table.
	CommentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "body", Type: field.TypeString},
		{Name: "event_comments", Type: field.TypeUUID},
		{Name: "user_comments", Type: field.TypeUUID},
	}
	// CommentsTable holds the schema information for the "comments" table.
	CommentsTable = &schema.Table{
		Name:       "comments",
		Columns:    CommentsColumns,
		PrimaryKey: []*schema.Column{CommentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "comments_events_comments",
				Columns:    []*schema.Column{CommentsColumns[2]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "comments_users_comments",
				Columns:    []*schema.Column{CommentsColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// EventsColumns holds the columns for the "events" table.
	EventsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString, Size: 100},
		{Name: "detail", Type: field.TypeString, Nullable: true, Size: 500},
		{Name: "location", Type: field.TypeString, Nullable: true, Size: 200},
		{Name: "size", Type: field.TypeInt},
		{Name: "type", Type: field.TypeString, Size: 30},
		{Name: "state", Type: field.TypeString, Size: 30},
		{Name: "event_admin", Type: field.TypeUUID, Nullable: true},
	}
	// EventsTable holds the schema information for the "events" table.
	EventsTable = &schema.Table{
		Name:       "events",
		Columns:    EventsColumns,
		PrimaryKey: []*schema.Column{EventsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "events_users_admin",
				Columns:    []*schema.Column{EventsColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// GoogleAuthsColumns holds the columns for the "google_auths" table.
	GoogleAuthsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "access_token", Type: field.TypeString},
		{Name: "refresh_token", Type: field.TypeString},
		{Name: "expiry", Type: field.TypeTime},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// GoogleAuthsTable holds the schema information for the "google_auths" table.
	GoogleAuthsTable = &schema.Table{
		Name:       "google_auths",
		Columns:    GoogleAuthsColumns,
		PrimaryKey: []*schema.Column{GoogleAuthsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "google_auths_users_user",
				Columns:    []*schema.Column{GoogleAuthsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// LoginSessionsColumns holds the columns for the "login_sessions" table.
	LoginSessionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Size: 200},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// LoginSessionsTable holds the schema information for the "login_sessions" table.
	LoginSessionsTable = &schema.Table{
		Name:       "login_sessions",
		Columns:    LoginSessionsColumns,
		PrimaryKey: []*schema.Column{LoginSessionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "login_sessions_users_user",
				Columns:    []*schema.Column{LoginSessionsColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString, Size: 20},
		{Name: "authenticated", Type: field.TypeBool, Default: false},
		{Name: "mail", Type: field.TypeString, Nullable: true, Size: 50},
		{Name: "icon", Type: field.TypeString, Nullable: true, Size: 200},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// UserEventsColumns holds the columns for the "user_events" table.
	UserEventsColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeUUID},
		{Name: "event_id", Type: field.TypeUUID},
	}
	// UserEventsTable holds the schema information for the "user_events" table.
	UserEventsTable = &schema.Table{
		Name:       "user_events",
		Columns:    UserEventsColumns,
		PrimaryKey: []*schema.Column{UserEventsColumns[0], UserEventsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_events_user_id",
				Columns:    []*schema.Column{UserEventsColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_events_event_id",
				Columns:    []*schema.Column{UserEventsColumns[1]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AuthStatesTable,
		CommentsTable,
		EventsTable,
		GoogleAuthsTable,
		LoginSessionsTable,
		UsersTable,
		UserEventsTable,
	}
)

func init() {
	CommentsTable.ForeignKeys[0].RefTable = EventsTable
	CommentsTable.ForeignKeys[1].RefTable = UsersTable
	EventsTable.ForeignKeys[0].RefTable = UsersTable
	GoogleAuthsTable.ForeignKeys[0].RefTable = UsersTable
	LoginSessionsTable.ForeignKeys[0].RefTable = UsersTable
	UserEventsTable.ForeignKeys[0].RefTable = UsersTable
	UserEventsTable.ForeignKeys[1].RefTable = EventsTable
}
