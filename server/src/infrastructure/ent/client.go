// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/Doer-org/google-cloud-challenge-2022/infrastructure/ent/migrate"
	"github.com/google/uuid"

	"github.com/Doer-org/google-cloud-challenge-2022/infrastructure/ent/authstates"
	"github.com/Doer-org/google-cloud-challenge-2022/infrastructure/ent/ecomment"
	"github.com/Doer-org/google-cloud-challenge-2022/infrastructure/ent/estate"
	"github.com/Doer-org/google-cloud-challenge-2022/infrastructure/ent/etype"
	"github.com/Doer-org/google-cloud-challenge-2022/infrastructure/ent/event"
	"github.com/Doer-org/google-cloud-challenge-2022/infrastructure/ent/googleauth"
	"github.com/Doer-org/google-cloud-challenge-2022/infrastructure/ent/loginsessions"
	"github.com/Doer-org/google-cloud-challenge-2022/infrastructure/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AuthStates is the client for interacting with the AuthStates builders.
	AuthStates *AuthStatesClient
	// EState is the client for interacting with the EState builders.
	EState *EStateClient
	// EType is the client for interacting with the EType builders.
	EType *ETypeClient
	// Ecomment is the client for interacting with the Ecomment builders.
	Ecomment *EcommentClient
	// Event is the client for interacting with the Event builders.
	Event *EventClient
	// GoogleAuth is the client for interacting with the GoogleAuth builders.
	GoogleAuth *GoogleAuthClient
	// LoginSessions is the client for interacting with the LoginSessions builders.
	LoginSessions *LoginSessionsClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AuthStates = NewAuthStatesClient(c.config)
	c.EState = NewEStateClient(c.config)
	c.EType = NewETypeClient(c.config)
	c.Ecomment = NewEcommentClient(c.config)
	c.Event = NewEventClient(c.config)
	c.GoogleAuth = NewGoogleAuthClient(c.config)
	c.LoginSessions = NewLoginSessionsClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		AuthStates:    NewAuthStatesClient(cfg),
		EState:        NewEStateClient(cfg),
		EType:         NewETypeClient(cfg),
		Ecomment:      NewEcommentClient(cfg),
		Event:         NewEventClient(cfg),
		GoogleAuth:    NewGoogleAuthClient(cfg),
		LoginSessions: NewLoginSessionsClient(cfg),
		User:          NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		AuthStates:    NewAuthStatesClient(cfg),
		EState:        NewEStateClient(cfg),
		EType:         NewETypeClient(cfg),
		Ecomment:      NewEcommentClient(cfg),
		Event:         NewEventClient(cfg),
		GoogleAuth:    NewGoogleAuthClient(cfg),
		LoginSessions: NewLoginSessionsClient(cfg),
		User:          NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AuthStates.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.AuthStates.Use(hooks...)
	c.EState.Use(hooks...)
	c.EType.Use(hooks...)
	c.Ecomment.Use(hooks...)
	c.Event.Use(hooks...)
	c.GoogleAuth.Use(hooks...)
	c.LoginSessions.Use(hooks...)
	c.User.Use(hooks...)
}

// AuthStatesClient is a client for the AuthStates schema.
type AuthStatesClient struct {
	config
}

// NewAuthStatesClient returns a client for the AuthStates from the given config.
func NewAuthStatesClient(c config) *AuthStatesClient {
	return &AuthStatesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `authstates.Hooks(f(g(h())))`.
func (c *AuthStatesClient) Use(hooks ...Hook) {
	c.hooks.AuthStates = append(c.hooks.AuthStates, hooks...)
}

// Create returns a builder for creating a AuthStates entity.
func (c *AuthStatesClient) Create() *AuthStatesCreate {
	mutation := newAuthStatesMutation(c.config, OpCreate)
	return &AuthStatesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AuthStates entities.
func (c *AuthStatesClient) CreateBulk(builders ...*AuthStatesCreate) *AuthStatesCreateBulk {
	return &AuthStatesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AuthStates.
func (c *AuthStatesClient) Update() *AuthStatesUpdate {
	mutation := newAuthStatesMutation(c.config, OpUpdate)
	return &AuthStatesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuthStatesClient) UpdateOne(as *AuthStates) *AuthStatesUpdateOne {
	mutation := newAuthStatesMutation(c.config, OpUpdateOne, withAuthStates(as))
	return &AuthStatesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AuthStatesClient) UpdateOneID(id int) *AuthStatesUpdateOne {
	mutation := newAuthStatesMutation(c.config, OpUpdateOne, withAuthStatesID(id))
	return &AuthStatesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AuthStates.
func (c *AuthStatesClient) Delete() *AuthStatesDelete {
	mutation := newAuthStatesMutation(c.config, OpDelete)
	return &AuthStatesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AuthStatesClient) DeleteOne(as *AuthStates) *AuthStatesDeleteOne {
	return c.DeleteOneID(as.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AuthStatesClient) DeleteOneID(id int) *AuthStatesDeleteOne {
	builder := c.Delete().Where(authstates.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AuthStatesDeleteOne{builder}
}

// Query returns a query builder for AuthStates.
func (c *AuthStatesClient) Query() *AuthStatesQuery {
	return &AuthStatesQuery{
		config: c.config,
	}
}

// Get returns a AuthStates entity by its id.
func (c *AuthStatesClient) Get(ctx context.Context, id int) (*AuthStates, error) {
	return c.Query().Where(authstates.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuthStatesClient) GetX(ctx context.Context, id int) *AuthStates {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AuthStatesClient) Hooks() []Hook {
	return c.hooks.AuthStates
}

// EStateClient is a client for the EState schema.
type EStateClient struct {
	config
}

// NewEStateClient returns a client for the EState from the given config.
func NewEStateClient(c config) *EStateClient {
	return &EStateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `estate.Hooks(f(g(h())))`.
func (c *EStateClient) Use(hooks ...Hook) {
	c.hooks.EState = append(c.hooks.EState, hooks...)
}

// Create returns a builder for creating a EState entity.
func (c *EStateClient) Create() *EStateCreate {
	mutation := newEStateMutation(c.config, OpCreate)
	return &EStateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EState entities.
func (c *EStateClient) CreateBulk(builders ...*EStateCreate) *EStateCreateBulk {
	return &EStateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EState.
func (c *EStateClient) Update() *EStateUpdate {
	mutation := newEStateMutation(c.config, OpUpdate)
	return &EStateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EStateClient) UpdateOne(e *EState) *EStateUpdateOne {
	mutation := newEStateMutation(c.config, OpUpdateOne, withEState(e))
	return &EStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EStateClient) UpdateOneID(id uuid.UUID) *EStateUpdateOne {
	mutation := newEStateMutation(c.config, OpUpdateOne, withEStateID(id))
	return &EStateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EState.
func (c *EStateClient) Delete() *EStateDelete {
	mutation := newEStateMutation(c.config, OpDelete)
	return &EStateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EStateClient) DeleteOne(e *EState) *EStateDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EStateClient) DeleteOneID(id uuid.UUID) *EStateDeleteOne {
	builder := c.Delete().Where(estate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EStateDeleteOne{builder}
}

// Query returns a query builder for EState.
func (c *EStateClient) Query() *EStateQuery {
	return &EStateQuery{
		config: c.config,
	}
}

// Get returns a EState entity by its id.
func (c *EStateClient) Get(ctx context.Context, id uuid.UUID) (*EState, error) {
	return c.Query().Where(estate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EStateClient) GetX(ctx context.Context, id uuid.UUID) *EState {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEvent queries the event edge of a EState.
func (c *EStateClient) QueryEvent(e *EState) *EventQuery {
	query := &EventQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(estate.Table, estate.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, estate.EventTable, estate.EventColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EStateClient) Hooks() []Hook {
	return c.hooks.EState
}

// ETypeClient is a client for the EType schema.
type ETypeClient struct {
	config
}

// NewETypeClient returns a client for the EType from the given config.
func NewETypeClient(c config) *ETypeClient {
	return &ETypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `etype.Hooks(f(g(h())))`.
func (c *ETypeClient) Use(hooks ...Hook) {
	c.hooks.EType = append(c.hooks.EType, hooks...)
}

// Create returns a builder for creating a EType entity.
func (c *ETypeClient) Create() *ETypeCreate {
	mutation := newETypeMutation(c.config, OpCreate)
	return &ETypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EType entities.
func (c *ETypeClient) CreateBulk(builders ...*ETypeCreate) *ETypeCreateBulk {
	return &ETypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EType.
func (c *ETypeClient) Update() *ETypeUpdate {
	mutation := newETypeMutation(c.config, OpUpdate)
	return &ETypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ETypeClient) UpdateOne(e *EType) *ETypeUpdateOne {
	mutation := newETypeMutation(c.config, OpUpdateOne, withEType(e))
	return &ETypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ETypeClient) UpdateOneID(id uuid.UUID) *ETypeUpdateOne {
	mutation := newETypeMutation(c.config, OpUpdateOne, withETypeID(id))
	return &ETypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EType.
func (c *ETypeClient) Delete() *ETypeDelete {
	mutation := newETypeMutation(c.config, OpDelete)
	return &ETypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ETypeClient) DeleteOne(e *EType) *ETypeDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ETypeClient) DeleteOneID(id uuid.UUID) *ETypeDeleteOne {
	builder := c.Delete().Where(etype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ETypeDeleteOne{builder}
}

// Query returns a query builder for EType.
func (c *ETypeClient) Query() *ETypeQuery {
	return &ETypeQuery{
		config: c.config,
	}
}

// Get returns a EType entity by its id.
func (c *ETypeClient) Get(ctx context.Context, id uuid.UUID) (*EType, error) {
	return c.Query().Where(etype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ETypeClient) GetX(ctx context.Context, id uuid.UUID) *EType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEvent queries the event edge of a EType.
func (c *ETypeClient) QueryEvent(e *EType) *EventQuery {
	query := &EventQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(etype.Table, etype.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, etype.EventTable, etype.EventColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ETypeClient) Hooks() []Hook {
	return c.hooks.EType
}

// EcommentClient is a client for the Ecomment schema.
type EcommentClient struct {
	config
}

// NewEcommentClient returns a client for the Ecomment from the given config.
func NewEcommentClient(c config) *EcommentClient {
	return &EcommentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ecomment.Hooks(f(g(h())))`.
func (c *EcommentClient) Use(hooks ...Hook) {
	c.hooks.Ecomment = append(c.hooks.Ecomment, hooks...)
}

// Create returns a builder for creating a Ecomment entity.
func (c *EcommentClient) Create() *EcommentCreate {
	mutation := newEcommentMutation(c.config, OpCreate)
	return &EcommentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Ecomment entities.
func (c *EcommentClient) CreateBulk(builders ...*EcommentCreate) *EcommentCreateBulk {
	return &EcommentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Ecomment.
func (c *EcommentClient) Update() *EcommentUpdate {
	mutation := newEcommentMutation(c.config, OpUpdate)
	return &EcommentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EcommentClient) UpdateOne(e *Ecomment) *EcommentUpdateOne {
	mutation := newEcommentMutation(c.config, OpUpdateOne, withEcomment(e))
	return &EcommentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EcommentClient) UpdateOneID(id uuid.UUID) *EcommentUpdateOne {
	mutation := newEcommentMutation(c.config, OpUpdateOne, withEcommentID(id))
	return &EcommentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Ecomment.
func (c *EcommentClient) Delete() *EcommentDelete {
	mutation := newEcommentMutation(c.config, OpDelete)
	return &EcommentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EcommentClient) DeleteOne(e *Ecomment) *EcommentDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EcommentClient) DeleteOneID(id uuid.UUID) *EcommentDeleteOne {
	builder := c.Delete().Where(ecomment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EcommentDeleteOne{builder}
}

// Query returns a query builder for Ecomment.
func (c *EcommentClient) Query() *EcommentQuery {
	return &EcommentQuery{
		config: c.config,
	}
}

// Get returns a Ecomment entity by its id.
func (c *EcommentClient) Get(ctx context.Context, id uuid.UUID) (*Ecomment, error) {
	return c.Query().Where(ecomment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EcommentClient) GetX(ctx context.Context, id uuid.UUID) *Ecomment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEvent queries the event edge of a Ecomment.
func (c *EcommentClient) QueryEvent(e *Ecomment) *EventQuery {
	query := &EventQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ecomment.Table, ecomment.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ecomment.EventTable, ecomment.EventColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Ecomment.
func (c *EcommentClient) QueryUser(e *Ecomment) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ecomment.Table, ecomment.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ecomment.UserTable, ecomment.UserColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EcommentClient) Hooks() []Hook {
	return c.hooks.Ecomment
}

// EventClient is a client for the Event schema.
type EventClient struct {
	config
}

// NewEventClient returns a client for the Event from the given config.
func NewEventClient(c config) *EventClient {
	return &EventClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `event.Hooks(f(g(h())))`.
func (c *EventClient) Use(hooks ...Hook) {
	c.hooks.Event = append(c.hooks.Event, hooks...)
}

// Create returns a builder for creating a Event entity.
func (c *EventClient) Create() *EventCreate {
	mutation := newEventMutation(c.config, OpCreate)
	return &EventCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Event entities.
func (c *EventClient) CreateBulk(builders ...*EventCreate) *EventCreateBulk {
	return &EventCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Event.
func (c *EventClient) Update() *EventUpdate {
	mutation := newEventMutation(c.config, OpUpdate)
	return &EventUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EventClient) UpdateOne(e *Event) *EventUpdateOne {
	mutation := newEventMutation(c.config, OpUpdateOne, withEvent(e))
	return &EventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EventClient) UpdateOneID(id uuid.UUID) *EventUpdateOne {
	mutation := newEventMutation(c.config, OpUpdateOne, withEventID(id))
	return &EventUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Event.
func (c *EventClient) Delete() *EventDelete {
	mutation := newEventMutation(c.config, OpDelete)
	return &EventDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EventClient) DeleteOne(e *Event) *EventDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EventClient) DeleteOneID(id uuid.UUID) *EventDeleteOne {
	builder := c.Delete().Where(event.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EventDeleteOne{builder}
}

// Query returns a query builder for Event.
func (c *EventClient) Query() *EventQuery {
	return &EventQuery{
		config: c.config,
	}
}

// Get returns a Event entity by its id.
func (c *EventClient) Get(ctx context.Context, id uuid.UUID) (*Event, error) {
	return c.Query().Where(event.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EventClient) GetX(ctx context.Context, id uuid.UUID) *Event {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryState queries the state edge of a Event.
func (c *EventClient) QueryState(e *Event) *EStateQuery {
	query := &EStateQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, id),
			sqlgraph.To(estate.Table, estate.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, event.StateTable, event.StateColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryType queries the type edge of a Event.
func (c *EventClient) QueryType(e *Event) *ETypeQuery {
	query := &ETypeQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, id),
			sqlgraph.To(etype.Table, etype.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, event.TypeTable, event.TypeColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsers queries the users edge of a Event.
func (c *EventClient) QueryUsers(e *Event) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, event.UsersTable, event.UsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EventClient) Hooks() []Hook {
	return c.hooks.Event
}

// GoogleAuthClient is a client for the GoogleAuth schema.
type GoogleAuthClient struct {
	config
}

// NewGoogleAuthClient returns a client for the GoogleAuth from the given config.
func NewGoogleAuthClient(c config) *GoogleAuthClient {
	return &GoogleAuthClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `googleauth.Hooks(f(g(h())))`.
func (c *GoogleAuthClient) Use(hooks ...Hook) {
	c.hooks.GoogleAuth = append(c.hooks.GoogleAuth, hooks...)
}

// Create returns a builder for creating a GoogleAuth entity.
func (c *GoogleAuthClient) Create() *GoogleAuthCreate {
	mutation := newGoogleAuthMutation(c.config, OpCreate)
	return &GoogleAuthCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GoogleAuth entities.
func (c *GoogleAuthClient) CreateBulk(builders ...*GoogleAuthCreate) *GoogleAuthCreateBulk {
	return &GoogleAuthCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GoogleAuth.
func (c *GoogleAuthClient) Update() *GoogleAuthUpdate {
	mutation := newGoogleAuthMutation(c.config, OpUpdate)
	return &GoogleAuthUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GoogleAuthClient) UpdateOne(ga *GoogleAuth) *GoogleAuthUpdateOne {
	mutation := newGoogleAuthMutation(c.config, OpUpdateOne, withGoogleAuth(ga))
	return &GoogleAuthUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GoogleAuthClient) UpdateOneID(id int) *GoogleAuthUpdateOne {
	mutation := newGoogleAuthMutation(c.config, OpUpdateOne, withGoogleAuthID(id))
	return &GoogleAuthUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GoogleAuth.
func (c *GoogleAuthClient) Delete() *GoogleAuthDelete {
	mutation := newGoogleAuthMutation(c.config, OpDelete)
	return &GoogleAuthDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GoogleAuthClient) DeleteOne(ga *GoogleAuth) *GoogleAuthDeleteOne {
	return c.DeleteOneID(ga.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GoogleAuthClient) DeleteOneID(id int) *GoogleAuthDeleteOne {
	builder := c.Delete().Where(googleauth.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GoogleAuthDeleteOne{builder}
}

// Query returns a query builder for GoogleAuth.
func (c *GoogleAuthClient) Query() *GoogleAuthQuery {
	return &GoogleAuthQuery{
		config: c.config,
	}
}

// Get returns a GoogleAuth entity by its id.
func (c *GoogleAuthClient) Get(ctx context.Context, id int) (*GoogleAuth, error) {
	return c.Query().Where(googleauth.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GoogleAuthClient) GetX(ctx context.Context, id int) *GoogleAuth {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a GoogleAuth.
func (c *GoogleAuthClient) QueryUser(ga *GoogleAuth) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ga.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(googleauth.Table, googleauth.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, googleauth.UserTable, googleauth.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ga.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GoogleAuthClient) Hooks() []Hook {
	return c.hooks.GoogleAuth
}

// LoginSessionsClient is a client for the LoginSessions schema.
type LoginSessionsClient struct {
	config
}

// NewLoginSessionsClient returns a client for the LoginSessions from the given config.
func NewLoginSessionsClient(c config) *LoginSessionsClient {
	return &LoginSessionsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `loginsessions.Hooks(f(g(h())))`.
func (c *LoginSessionsClient) Use(hooks ...Hook) {
	c.hooks.LoginSessions = append(c.hooks.LoginSessions, hooks...)
}

// Create returns a builder for creating a LoginSessions entity.
func (c *LoginSessionsClient) Create() *LoginSessionsCreate {
	mutation := newLoginSessionsMutation(c.config, OpCreate)
	return &LoginSessionsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LoginSessions entities.
func (c *LoginSessionsClient) CreateBulk(builders ...*LoginSessionsCreate) *LoginSessionsCreateBulk {
	return &LoginSessionsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LoginSessions.
func (c *LoginSessionsClient) Update() *LoginSessionsUpdate {
	mutation := newLoginSessionsMutation(c.config, OpUpdate)
	return &LoginSessionsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LoginSessionsClient) UpdateOne(ls *LoginSessions) *LoginSessionsUpdateOne {
	mutation := newLoginSessionsMutation(c.config, OpUpdateOne, withLoginSessions(ls))
	return &LoginSessionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LoginSessionsClient) UpdateOneID(id string) *LoginSessionsUpdateOne {
	mutation := newLoginSessionsMutation(c.config, OpUpdateOne, withLoginSessionsID(id))
	return &LoginSessionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LoginSessions.
func (c *LoginSessionsClient) Delete() *LoginSessionsDelete {
	mutation := newLoginSessionsMutation(c.config, OpDelete)
	return &LoginSessionsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LoginSessionsClient) DeleteOne(ls *LoginSessions) *LoginSessionsDeleteOne {
	return c.DeleteOneID(ls.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LoginSessionsClient) DeleteOneID(id string) *LoginSessionsDeleteOne {
	builder := c.Delete().Where(loginsessions.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LoginSessionsDeleteOne{builder}
}

// Query returns a query builder for LoginSessions.
func (c *LoginSessionsClient) Query() *LoginSessionsQuery {
	return &LoginSessionsQuery{
		config: c.config,
	}
}

// Get returns a LoginSessions entity by its id.
func (c *LoginSessionsClient) Get(ctx context.Context, id string) (*LoginSessions, error) {
	return c.Query().Where(loginsessions.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LoginSessionsClient) GetX(ctx context.Context, id string) *LoginSessions {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a LoginSessions.
func (c *LoginSessionsClient) QueryUser(ls *LoginSessions) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ls.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(loginsessions.Table, loginsessions.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, loginsessions.UserTable, loginsessions.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ls.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LoginSessionsClient) Hooks() []Hook {
	return c.hooks.LoginSessions
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEvents queries the events edge of a User.
func (c *UserClient) QueryEvents(u *User) *EventQuery {
	query := &EventQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.EventsTable, user.EventsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
