// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Doer-org/google-cloud-challenge-2022/infrastructure/ent/authstates"
)

// AuthStatesCreate is the builder for creating a AuthStates entity.
type AuthStatesCreate struct {
	config
	mutation *AuthStatesMutation
	hooks    []Hook
}

// SetState sets the "state" field.
func (asc *AuthStatesCreate) SetState(s string) *AuthStatesCreate {
	asc.mutation.SetState(s)
	return asc
}

// SetRedirectURL sets the "redirect_url" field.
func (asc *AuthStatesCreate) SetRedirectURL(s string) *AuthStatesCreate {
	asc.mutation.SetRedirectURL(s)
	return asc
}

// SetNillableRedirectURL sets the "redirect_url" field if the given value is not nil.
func (asc *AuthStatesCreate) SetNillableRedirectURL(s *string) *AuthStatesCreate {
	if s != nil {
		asc.SetRedirectURL(*s)
	}
	return asc
}

// Mutation returns the AuthStatesMutation object of the builder.
func (asc *AuthStatesCreate) Mutation() *AuthStatesMutation {
	return asc.mutation
}

// Save creates the AuthStates in the database.
func (asc *AuthStatesCreate) Save(ctx context.Context) (*AuthStates, error) {
	return withHooks[*AuthStates, AuthStatesMutation](ctx, asc.sqlSave, asc.mutation, asc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (asc *AuthStatesCreate) SaveX(ctx context.Context) *AuthStates {
	v, err := asc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (asc *AuthStatesCreate) Exec(ctx context.Context) error {
	_, err := asc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asc *AuthStatesCreate) ExecX(ctx context.Context) {
	if err := asc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asc *AuthStatesCreate) check() error {
	if _, ok := asc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "AuthStates.state"`)}
	}
	if v, ok := asc.mutation.State(); ok {
		if err := authstates.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "AuthStates.state": %w`, err)}
		}
	}
	if v, ok := asc.mutation.RedirectURL(); ok {
		if err := authstates.RedirectURLValidator(v); err != nil {
			return &ValidationError{Name: "redirect_url", err: fmt.Errorf(`ent: validator failed for field "AuthStates.redirect_url": %w`, err)}
		}
	}
	return nil
}

func (asc *AuthStatesCreate) sqlSave(ctx context.Context) (*AuthStates, error) {
	if err := asc.check(); err != nil {
		return nil, err
	}
	_node, _spec := asc.createSpec()
	if err := sqlgraph.CreateNode(ctx, asc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	asc.mutation.id = &_node.ID
	asc.mutation.done = true
	return _node, nil
}

func (asc *AuthStatesCreate) createSpec() (*AuthStates, *sqlgraph.CreateSpec) {
	var (
		_node = &AuthStates{config: asc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: authstates.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: authstates.FieldID,
			},
		}
	)
	if value, ok := asc.mutation.State(); ok {
		_spec.SetField(authstates.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := asc.mutation.RedirectURL(); ok {
		_spec.SetField(authstates.FieldRedirectURL, field.TypeString, value)
		_node.RedirectURL = value
	}
	return _node, _spec
}

// AuthStatesCreateBulk is the builder for creating many AuthStates entities in bulk.
type AuthStatesCreateBulk struct {
	config
	builders []*AuthStatesCreate
}

// Save creates the AuthStates entities in the database.
func (ascb *AuthStatesCreateBulk) Save(ctx context.Context) ([]*AuthStates, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ascb.builders))
	nodes := make([]*AuthStates, len(ascb.builders))
	mutators := make([]Mutator, len(ascb.builders))
	for i := range ascb.builders {
		func(i int, root context.Context) {
			builder := ascb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuthStatesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ascb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ascb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ascb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ascb *AuthStatesCreateBulk) SaveX(ctx context.Context) []*AuthStates {
	v, err := ascb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ascb *AuthStatesCreateBulk) Exec(ctx context.Context) error {
	_, err := ascb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ascb *AuthStatesCreateBulk) ExecX(ctx context.Context) {
	if err := ascb.Exec(ctx); err != nil {
		panic(err)
	}
}
