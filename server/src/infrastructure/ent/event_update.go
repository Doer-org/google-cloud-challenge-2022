// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Doer-org/google-cloud-challenge-2022/infrastructure/ent/comment"
	"github.com/Doer-org/google-cloud-challenge-2022/infrastructure/ent/event"
	"github.com/Doer-org/google-cloud-challenge-2022/infrastructure/ent/predicate"
	"github.com/Doer-org/google-cloud-challenge-2022/infrastructure/ent/user"
	"github.com/google/uuid"
)

// EventUpdate is the builder for updating Event entities.
type EventUpdate struct {
	config
	hooks    []Hook
	mutation *EventMutation
}

// Where appends a list predicates to the EventUpdate builder.
func (eu *EventUpdate) Where(ps ...predicate.Event) *EventUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetName sets the "name" field.
func (eu *EventUpdate) SetName(s string) *EventUpdate {
	eu.mutation.SetName(s)
	return eu
}

// SetDetail sets the "detail" field.
func (eu *EventUpdate) SetDetail(s string) *EventUpdate {
	eu.mutation.SetDetail(s)
	return eu
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (eu *EventUpdate) SetNillableDetail(s *string) *EventUpdate {
	if s != nil {
		eu.SetDetail(*s)
	}
	return eu
}

// ClearDetail clears the value of the "detail" field.
func (eu *EventUpdate) ClearDetail() *EventUpdate {
	eu.mutation.ClearDetail()
	return eu
}

// SetLocation sets the "location" field.
func (eu *EventUpdate) SetLocation(s string) *EventUpdate {
	eu.mutation.SetLocation(s)
	return eu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (eu *EventUpdate) SetNillableLocation(s *string) *EventUpdate {
	if s != nil {
		eu.SetLocation(*s)
	}
	return eu
}

// ClearLocation clears the value of the "location" field.
func (eu *EventUpdate) ClearLocation() *EventUpdate {
	eu.mutation.ClearLocation()
	return eu
}

// SetSize sets the "size" field.
func (eu *EventUpdate) SetSize(i int) *EventUpdate {
	eu.mutation.ResetSize()
	eu.mutation.SetSize(i)
	return eu
}

// AddSize adds i to the "size" field.
func (eu *EventUpdate) AddSize(i int) *EventUpdate {
	eu.mutation.AddSize(i)
	return eu
}

// SetCreatedAt sets the "created_at" field.
func (eu *EventUpdate) SetCreatedAt(t time.Time) *EventUpdate {
	eu.mutation.SetCreatedAt(t)
	return eu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eu *EventUpdate) SetNillableCreatedAt(t *time.Time) *EventUpdate {
	if t != nil {
		eu.SetCreatedAt(*t)
	}
	return eu
}

// SetLimitHour sets the "limit_hour" field.
func (eu *EventUpdate) SetLimitHour(i int) *EventUpdate {
	eu.mutation.ResetLimitHour()
	eu.mutation.SetLimitHour(i)
	return eu
}

// AddLimitHour adds i to the "limit_hour" field.
func (eu *EventUpdate) AddLimitHour(i int) *EventUpdate {
	eu.mutation.AddLimitHour(i)
	return eu
}

// SetType sets the "type" field.
func (eu *EventUpdate) SetType(s string) *EventUpdate {
	eu.mutation.SetType(s)
	return eu
}

// SetState sets the "state" field.
func (eu *EventUpdate) SetState(s string) *EventUpdate {
	eu.mutation.SetState(s)
	return eu
}

// SetAdminID sets the "admin" edge to the User entity by ID.
func (eu *EventUpdate) SetAdminID(id uuid.UUID) *EventUpdate {
	eu.mutation.SetAdminID(id)
	return eu
}

// SetNillableAdminID sets the "admin" edge to the User entity by ID if the given value is not nil.
func (eu *EventUpdate) SetNillableAdminID(id *uuid.UUID) *EventUpdate {
	if id != nil {
		eu = eu.SetAdminID(*id)
	}
	return eu
}

// SetAdmin sets the "admin" edge to the User entity.
func (eu *EventUpdate) SetAdmin(u *User) *EventUpdate {
	return eu.SetAdminID(u.ID)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (eu *EventUpdate) AddUserIDs(ids ...uuid.UUID) *EventUpdate {
	eu.mutation.AddUserIDs(ids...)
	return eu
}

// AddUsers adds the "users" edges to the User entity.
func (eu *EventUpdate) AddUsers(u ...*User) *EventUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eu.AddUserIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (eu *EventUpdate) AddCommentIDs(ids ...uuid.UUID) *EventUpdate {
	eu.mutation.AddCommentIDs(ids...)
	return eu
}

// AddComments adds the "comments" edges to the Comment entity.
func (eu *EventUpdate) AddComments(c ...*Comment) *EventUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.AddCommentIDs(ids...)
}

// Mutation returns the EventMutation object of the builder.
func (eu *EventUpdate) Mutation() *EventMutation {
	return eu.mutation
}

// ClearAdmin clears the "admin" edge to the User entity.
func (eu *EventUpdate) ClearAdmin() *EventUpdate {
	eu.mutation.ClearAdmin()
	return eu
}

// ClearUsers clears all "users" edges to the User entity.
func (eu *EventUpdate) ClearUsers() *EventUpdate {
	eu.mutation.ClearUsers()
	return eu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (eu *EventUpdate) RemoveUserIDs(ids ...uuid.UUID) *EventUpdate {
	eu.mutation.RemoveUserIDs(ids...)
	return eu
}

// RemoveUsers removes "users" edges to User entities.
func (eu *EventUpdate) RemoveUsers(u ...*User) *EventUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eu.RemoveUserIDs(ids...)
}

// ClearComments clears all "comments" edges to the Comment entity.
func (eu *EventUpdate) ClearComments() *EventUpdate {
	eu.mutation.ClearComments()
	return eu
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (eu *EventUpdate) RemoveCommentIDs(ids ...uuid.UUID) *EventUpdate {
	eu.mutation.RemoveCommentIDs(ids...)
	return eu
}

// RemoveComments removes "comments" edges to Comment entities.
func (eu *EventUpdate) RemoveComments(c ...*Comment) *EventUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.RemoveCommentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EventUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, EventMutation](ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EventUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EventUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EventUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EventUpdate) check() error {
	if v, ok := eu.mutation.Name(); ok {
		if err := event.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Event.name": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Detail(); ok {
		if err := event.DetailValidator(v); err != nil {
			return &ValidationError{Name: "detail", err: fmt.Errorf(`ent: validator failed for field "Event.detail": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Location(); ok {
		if err := event.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "Event.location": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Size(); ok {
		if err := event.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`ent: validator failed for field "Event.size": %w`, err)}
		}
	}
	if v, ok := eu.mutation.LimitHour(); ok {
		if err := event.LimitHourValidator(v); err != nil {
			return &ValidationError{Name: "limit_hour", err: fmt.Errorf(`ent: validator failed for field "Event.limit_hour": %w`, err)}
		}
	}
	if v, ok := eu.mutation.GetType(); ok {
		if err := event.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Event.type": %w`, err)}
		}
	}
	if v, ok := eu.mutation.State(); ok {
		if err := event.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Event.state": %w`, err)}
		}
	}
	return nil
}

func (eu *EventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   event.Table,
			Columns: event.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: event.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Name(); ok {
		_spec.SetField(event.FieldName, field.TypeString, value)
	}
	if value, ok := eu.mutation.Detail(); ok {
		_spec.SetField(event.FieldDetail, field.TypeString, value)
	}
	if eu.mutation.DetailCleared() {
		_spec.ClearField(event.FieldDetail, field.TypeString)
	}
	if value, ok := eu.mutation.Location(); ok {
		_spec.SetField(event.FieldLocation, field.TypeString, value)
	}
	if eu.mutation.LocationCleared() {
		_spec.ClearField(event.FieldLocation, field.TypeString)
	}
	if value, ok := eu.mutation.Size(); ok {
		_spec.SetField(event.FieldSize, field.TypeInt, value)
	}
	if value, ok := eu.mutation.AddedSize(); ok {
		_spec.AddField(event.FieldSize, field.TypeInt, value)
	}
	if value, ok := eu.mutation.CreatedAt(); ok {
		_spec.SetField(event.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := eu.mutation.LimitHour(); ok {
		_spec.SetField(event.FieldLimitHour, field.TypeInt, value)
	}
	if value, ok := eu.mutation.AddedLimitHour(); ok {
		_spec.AddField(event.FieldLimitHour, field.TypeInt, value)
	}
	if value, ok := eu.mutation.GetType(); ok {
		_spec.SetField(event.FieldType, field.TypeString, value)
	}
	if value, ok := eu.mutation.State(); ok {
		_spec.SetField(event.FieldState, field.TypeString, value)
	}
	if eu.mutation.AdminCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.AdminTable,
			Columns: []string{event.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.AdminIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.AdminTable,
			Columns: []string{event.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.UsersTable,
			Columns: event.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !eu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.UsersTable,
			Columns: event.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.UsersTable,
			Columns: event.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.CommentsTable,
			Columns: []string{event.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: comment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !eu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.CommentsTable,
			Columns: []string{event.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.CommentsTable,
			Columns: []string{event.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EventUpdateOne is the builder for updating a single Event entity.
type EventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventMutation
}

// SetName sets the "name" field.
func (euo *EventUpdateOne) SetName(s string) *EventUpdateOne {
	euo.mutation.SetName(s)
	return euo
}

// SetDetail sets the "detail" field.
func (euo *EventUpdateOne) SetDetail(s string) *EventUpdateOne {
	euo.mutation.SetDetail(s)
	return euo
}

// SetNillableDetail sets the "detail" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableDetail(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetDetail(*s)
	}
	return euo
}

// ClearDetail clears the value of the "detail" field.
func (euo *EventUpdateOne) ClearDetail() *EventUpdateOne {
	euo.mutation.ClearDetail()
	return euo
}

// SetLocation sets the "location" field.
func (euo *EventUpdateOne) SetLocation(s string) *EventUpdateOne {
	euo.mutation.SetLocation(s)
	return euo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableLocation(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetLocation(*s)
	}
	return euo
}

// ClearLocation clears the value of the "location" field.
func (euo *EventUpdateOne) ClearLocation() *EventUpdateOne {
	euo.mutation.ClearLocation()
	return euo
}

// SetSize sets the "size" field.
func (euo *EventUpdateOne) SetSize(i int) *EventUpdateOne {
	euo.mutation.ResetSize()
	euo.mutation.SetSize(i)
	return euo
}

// AddSize adds i to the "size" field.
func (euo *EventUpdateOne) AddSize(i int) *EventUpdateOne {
	euo.mutation.AddSize(i)
	return euo
}

// SetCreatedAt sets the "created_at" field.
func (euo *EventUpdateOne) SetCreatedAt(t time.Time) *EventUpdateOne {
	euo.mutation.SetCreatedAt(t)
	return euo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableCreatedAt(t *time.Time) *EventUpdateOne {
	if t != nil {
		euo.SetCreatedAt(*t)
	}
	return euo
}

// SetLimitHour sets the "limit_hour" field.
func (euo *EventUpdateOne) SetLimitHour(i int) *EventUpdateOne {
	euo.mutation.ResetLimitHour()
	euo.mutation.SetLimitHour(i)
	return euo
}

// AddLimitHour adds i to the "limit_hour" field.
func (euo *EventUpdateOne) AddLimitHour(i int) *EventUpdateOne {
	euo.mutation.AddLimitHour(i)
	return euo
}

// SetType sets the "type" field.
func (euo *EventUpdateOne) SetType(s string) *EventUpdateOne {
	euo.mutation.SetType(s)
	return euo
}

// SetState sets the "state" field.
func (euo *EventUpdateOne) SetState(s string) *EventUpdateOne {
	euo.mutation.SetState(s)
	return euo
}

// SetAdminID sets the "admin" edge to the User entity by ID.
func (euo *EventUpdateOne) SetAdminID(id uuid.UUID) *EventUpdateOne {
	euo.mutation.SetAdminID(id)
	return euo
}

// SetNillableAdminID sets the "admin" edge to the User entity by ID if the given value is not nil.
func (euo *EventUpdateOne) SetNillableAdminID(id *uuid.UUID) *EventUpdateOne {
	if id != nil {
		euo = euo.SetAdminID(*id)
	}
	return euo
}

// SetAdmin sets the "admin" edge to the User entity.
func (euo *EventUpdateOne) SetAdmin(u *User) *EventUpdateOne {
	return euo.SetAdminID(u.ID)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (euo *EventUpdateOne) AddUserIDs(ids ...uuid.UUID) *EventUpdateOne {
	euo.mutation.AddUserIDs(ids...)
	return euo
}

// AddUsers adds the "users" edges to the User entity.
func (euo *EventUpdateOne) AddUsers(u ...*User) *EventUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return euo.AddUserIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (euo *EventUpdateOne) AddCommentIDs(ids ...uuid.UUID) *EventUpdateOne {
	euo.mutation.AddCommentIDs(ids...)
	return euo
}

// AddComments adds the "comments" edges to the Comment entity.
func (euo *EventUpdateOne) AddComments(c ...*Comment) *EventUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.AddCommentIDs(ids...)
}

// Mutation returns the EventMutation object of the builder.
func (euo *EventUpdateOne) Mutation() *EventMutation {
	return euo.mutation
}

// ClearAdmin clears the "admin" edge to the User entity.
func (euo *EventUpdateOne) ClearAdmin() *EventUpdateOne {
	euo.mutation.ClearAdmin()
	return euo
}

// ClearUsers clears all "users" edges to the User entity.
func (euo *EventUpdateOne) ClearUsers() *EventUpdateOne {
	euo.mutation.ClearUsers()
	return euo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (euo *EventUpdateOne) RemoveUserIDs(ids ...uuid.UUID) *EventUpdateOne {
	euo.mutation.RemoveUserIDs(ids...)
	return euo
}

// RemoveUsers removes "users" edges to User entities.
func (euo *EventUpdateOne) RemoveUsers(u ...*User) *EventUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return euo.RemoveUserIDs(ids...)
}

// ClearComments clears all "comments" edges to the Comment entity.
func (euo *EventUpdateOne) ClearComments() *EventUpdateOne {
	euo.mutation.ClearComments()
	return euo
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (euo *EventUpdateOne) RemoveCommentIDs(ids ...uuid.UUID) *EventUpdateOne {
	euo.mutation.RemoveCommentIDs(ids...)
	return euo
}

// RemoveComments removes "comments" edges to Comment entities.
func (euo *EventUpdateOne) RemoveComments(c ...*Comment) *EventUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.RemoveCommentIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EventUpdateOne) Select(field string, fields ...string) *EventUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Event entity.
func (euo *EventUpdateOne) Save(ctx context.Context) (*Event, error) {
	return withHooks[*Event, EventMutation](ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EventUpdateOne) SaveX(ctx context.Context) *Event {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EventUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EventUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EventUpdateOne) check() error {
	if v, ok := euo.mutation.Name(); ok {
		if err := event.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Event.name": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Detail(); ok {
		if err := event.DetailValidator(v); err != nil {
			return &ValidationError{Name: "detail", err: fmt.Errorf(`ent: validator failed for field "Event.detail": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Location(); ok {
		if err := event.LocationValidator(v); err != nil {
			return &ValidationError{Name: "location", err: fmt.Errorf(`ent: validator failed for field "Event.location": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Size(); ok {
		if err := event.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`ent: validator failed for field "Event.size": %w`, err)}
		}
	}
	if v, ok := euo.mutation.LimitHour(); ok {
		if err := event.LimitHourValidator(v); err != nil {
			return &ValidationError{Name: "limit_hour", err: fmt.Errorf(`ent: validator failed for field "Event.limit_hour": %w`, err)}
		}
	}
	if v, ok := euo.mutation.GetType(); ok {
		if err := event.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Event.type": %w`, err)}
		}
	}
	if v, ok := euo.mutation.State(); ok {
		if err := event.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Event.state": %w`, err)}
		}
	}
	return nil
}

func (euo *EventUpdateOne) sqlSave(ctx context.Context) (_node *Event, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   event.Table,
			Columns: event.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: event.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Event.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, event.FieldID)
		for _, f := range fields {
			if !event.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != event.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Name(); ok {
		_spec.SetField(event.FieldName, field.TypeString, value)
	}
	if value, ok := euo.mutation.Detail(); ok {
		_spec.SetField(event.FieldDetail, field.TypeString, value)
	}
	if euo.mutation.DetailCleared() {
		_spec.ClearField(event.FieldDetail, field.TypeString)
	}
	if value, ok := euo.mutation.Location(); ok {
		_spec.SetField(event.FieldLocation, field.TypeString, value)
	}
	if euo.mutation.LocationCleared() {
		_spec.ClearField(event.FieldLocation, field.TypeString)
	}
	if value, ok := euo.mutation.Size(); ok {
		_spec.SetField(event.FieldSize, field.TypeInt, value)
	}
	if value, ok := euo.mutation.AddedSize(); ok {
		_spec.AddField(event.FieldSize, field.TypeInt, value)
	}
	if value, ok := euo.mutation.CreatedAt(); ok {
		_spec.SetField(event.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := euo.mutation.LimitHour(); ok {
		_spec.SetField(event.FieldLimitHour, field.TypeInt, value)
	}
	if value, ok := euo.mutation.AddedLimitHour(); ok {
		_spec.AddField(event.FieldLimitHour, field.TypeInt, value)
	}
	if value, ok := euo.mutation.GetType(); ok {
		_spec.SetField(event.FieldType, field.TypeString, value)
	}
	if value, ok := euo.mutation.State(); ok {
		_spec.SetField(event.FieldState, field.TypeString, value)
	}
	if euo.mutation.AdminCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.AdminTable,
			Columns: []string{event.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.AdminIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   event.AdminTable,
			Columns: []string{event.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.UsersTable,
			Columns: event.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !euo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.UsersTable,
			Columns: event.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.UsersTable,
			Columns: event.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.CommentsTable,
			Columns: []string{event.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: comment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !euo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.CommentsTable,
			Columns: []string{event.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.CommentsTable,
			Columns: []string{event.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Event{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
