// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Doer-org/google-cloud-challenge-2022/infrastructure/ent/authstates"
	"github.com/Doer-org/google-cloud-challenge-2022/infrastructure/ent/predicate"
)

// AuthStatesUpdate is the builder for updating AuthStates entities.
type AuthStatesUpdate struct {
	config
	hooks    []Hook
	mutation *AuthStatesMutation
}

// Where appends a list predicates to the AuthStatesUpdate builder.
func (asu *AuthStatesUpdate) Where(ps ...predicate.AuthStates) *AuthStatesUpdate {
	asu.mutation.Where(ps...)
	return asu
}

// SetState sets the "state" field.
func (asu *AuthStatesUpdate) SetState(s string) *AuthStatesUpdate {
	asu.mutation.SetState(s)
	return asu
}

// SetRedirectURL sets the "redirect_url" field.
func (asu *AuthStatesUpdate) SetRedirectURL(s string) *AuthStatesUpdate {
	asu.mutation.SetRedirectURL(s)
	return asu
}

// SetNillableRedirectURL sets the "redirect_url" field if the given value is not nil.
func (asu *AuthStatesUpdate) SetNillableRedirectURL(s *string) *AuthStatesUpdate {
	if s != nil {
		asu.SetRedirectURL(*s)
	}
	return asu
}

// ClearRedirectURL clears the value of the "redirect_url" field.
func (asu *AuthStatesUpdate) ClearRedirectURL() *AuthStatesUpdate {
	asu.mutation.ClearRedirectURL()
	return asu
}

// Mutation returns the AuthStatesMutation object of the builder.
func (asu *AuthStatesUpdate) Mutation() *AuthStatesMutation {
	return asu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (asu *AuthStatesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, AuthStatesMutation](ctx, asu.sqlSave, asu.mutation, asu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asu *AuthStatesUpdate) SaveX(ctx context.Context) int {
	affected, err := asu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (asu *AuthStatesUpdate) Exec(ctx context.Context) error {
	_, err := asu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asu *AuthStatesUpdate) ExecX(ctx context.Context) {
	if err := asu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asu *AuthStatesUpdate) check() error {
	if v, ok := asu.mutation.State(); ok {
		if err := authstates.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "AuthStates.state": %w`, err)}
		}
	}
	if v, ok := asu.mutation.RedirectURL(); ok {
		if err := authstates.RedirectURLValidator(v); err != nil {
			return &ValidationError{Name: "redirect_url", err: fmt.Errorf(`ent: validator failed for field "AuthStates.redirect_url": %w`, err)}
		}
	}
	return nil
}

func (asu *AuthStatesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := asu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   authstates.Table,
			Columns: authstates.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: authstates.FieldID,
			},
		},
	}
	if ps := asu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asu.mutation.State(); ok {
		_spec.SetField(authstates.FieldState, field.TypeString, value)
	}
	if value, ok := asu.mutation.RedirectURL(); ok {
		_spec.SetField(authstates.FieldRedirectURL, field.TypeString, value)
	}
	if asu.mutation.RedirectURLCleared() {
		_spec.ClearField(authstates.FieldRedirectURL, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, asu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authstates.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	asu.mutation.done = true
	return n, nil
}

// AuthStatesUpdateOne is the builder for updating a single AuthStates entity.
type AuthStatesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuthStatesMutation
}

// SetState sets the "state" field.
func (asuo *AuthStatesUpdateOne) SetState(s string) *AuthStatesUpdateOne {
	asuo.mutation.SetState(s)
	return asuo
}

// SetRedirectURL sets the "redirect_url" field.
func (asuo *AuthStatesUpdateOne) SetRedirectURL(s string) *AuthStatesUpdateOne {
	asuo.mutation.SetRedirectURL(s)
	return asuo
}

// SetNillableRedirectURL sets the "redirect_url" field if the given value is not nil.
func (asuo *AuthStatesUpdateOne) SetNillableRedirectURL(s *string) *AuthStatesUpdateOne {
	if s != nil {
		asuo.SetRedirectURL(*s)
	}
	return asuo
}

// ClearRedirectURL clears the value of the "redirect_url" field.
func (asuo *AuthStatesUpdateOne) ClearRedirectURL() *AuthStatesUpdateOne {
	asuo.mutation.ClearRedirectURL()
	return asuo
}

// Mutation returns the AuthStatesMutation object of the builder.
func (asuo *AuthStatesUpdateOne) Mutation() *AuthStatesMutation {
	return asuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (asuo *AuthStatesUpdateOne) Select(field string, fields ...string) *AuthStatesUpdateOne {
	asuo.fields = append([]string{field}, fields...)
	return asuo
}

// Save executes the query and returns the updated AuthStates entity.
func (asuo *AuthStatesUpdateOne) Save(ctx context.Context) (*AuthStates, error) {
	return withHooks[*AuthStates, AuthStatesMutation](ctx, asuo.sqlSave, asuo.mutation, asuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asuo *AuthStatesUpdateOne) SaveX(ctx context.Context) *AuthStates {
	node, err := asuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (asuo *AuthStatesUpdateOne) Exec(ctx context.Context) error {
	_, err := asuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asuo *AuthStatesUpdateOne) ExecX(ctx context.Context) {
	if err := asuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asuo *AuthStatesUpdateOne) check() error {
	if v, ok := asuo.mutation.State(); ok {
		if err := authstates.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "AuthStates.state": %w`, err)}
		}
	}
	if v, ok := asuo.mutation.RedirectURL(); ok {
		if err := authstates.RedirectURLValidator(v); err != nil {
			return &ValidationError{Name: "redirect_url", err: fmt.Errorf(`ent: validator failed for field "AuthStates.redirect_url": %w`, err)}
		}
	}
	return nil
}

func (asuo *AuthStatesUpdateOne) sqlSave(ctx context.Context) (_node *AuthStates, err error) {
	if err := asuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   authstates.Table,
			Columns: authstates.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: authstates.FieldID,
			},
		},
	}
	id, ok := asuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AuthStates.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := asuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, authstates.FieldID)
		for _, f := range fields {
			if !authstates.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != authstates.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := asuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asuo.mutation.State(); ok {
		_spec.SetField(authstates.FieldState, field.TypeString, value)
	}
	if value, ok := asuo.mutation.RedirectURL(); ok {
		_spec.SetField(authstates.FieldRedirectURL, field.TypeString, value)
	}
	if asuo.mutation.RedirectURLCleared() {
		_spec.ClearField(authstates.FieldRedirectURL, field.TypeString)
	}
	_node = &AuthStates{config: asuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, asuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authstates.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	asuo.mutation.done = true
	return _node, nil
}
