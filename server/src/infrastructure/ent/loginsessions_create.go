// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Doer-org/google-cloud-challenge-2022/infrastructure/ent/loginsessions"
	"github.com/Doer-org/google-cloud-challenge-2022/infrastructure/ent/user"
	"github.com/google/uuid"
)

// LoginSessionsCreate is the builder for creating a LoginSessions entity.
type LoginSessionsCreate struct {
	config
	mutation *LoginSessionsMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (lsc *LoginSessionsCreate) SetUserID(u uuid.UUID) *LoginSessionsCreate {
	lsc.mutation.SetUserID(u)
	return lsc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (lsc *LoginSessionsCreate) SetNillableUserID(u *uuid.UUID) *LoginSessionsCreate {
	if u != nil {
		lsc.SetUserID(*u)
	}
	return lsc
}

// SetID sets the "id" field.
func (lsc *LoginSessionsCreate) SetID(s string) *LoginSessionsCreate {
	lsc.mutation.SetID(s)
	return lsc
}

// SetUser sets the "user" edge to the User entity.
func (lsc *LoginSessionsCreate) SetUser(u *User) *LoginSessionsCreate {
	return lsc.SetUserID(u.ID)
}

// Mutation returns the LoginSessionsMutation object of the builder.
func (lsc *LoginSessionsCreate) Mutation() *LoginSessionsMutation {
	return lsc.mutation
}

// Save creates the LoginSessions in the database.
func (lsc *LoginSessionsCreate) Save(ctx context.Context) (*LoginSessions, error) {
	var (
		err  error
		node *LoginSessions
	)
	lsc.defaults()
	if len(lsc.hooks) == 0 {
		if err = lsc.check(); err != nil {
			return nil, err
		}
		node, err = lsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LoginSessionsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lsc.check(); err != nil {
				return nil, err
			}
			lsc.mutation = mutation
			if node, err = lsc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(lsc.hooks) - 1; i >= 0; i-- {
			if lsc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lsc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, lsc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*LoginSessions)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from LoginSessionsMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (lsc *LoginSessionsCreate) SaveX(ctx context.Context) *LoginSessions {
	v, err := lsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lsc *LoginSessionsCreate) Exec(ctx context.Context) error {
	_, err := lsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lsc *LoginSessionsCreate) ExecX(ctx context.Context) {
	if err := lsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lsc *LoginSessionsCreate) defaults() {
	if _, ok := lsc.mutation.UserID(); !ok {
		v := loginsessions.DefaultUserID()
		lsc.mutation.SetUserID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lsc *LoginSessionsCreate) check() error {
	if _, ok := lsc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "LoginSessions.user_id"`)}
	}
	if v, ok := lsc.mutation.ID(); ok {
		if err := loginsessions.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "LoginSessions.id": %w`, err)}
		}
	}
	if _, ok := lsc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "LoginSessions.user"`)}
	}
	return nil
}

func (lsc *LoginSessionsCreate) sqlSave(ctx context.Context) (*LoginSessions, error) {
	_node, _spec := lsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected LoginSessions.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (lsc *LoginSessionsCreate) createSpec() (*LoginSessions, *sqlgraph.CreateSpec) {
	var (
		_node = &LoginSessions{config: lsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: loginsessions.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: loginsessions.FieldID,
			},
		}
	)
	if id, ok := lsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if nodes := lsc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   loginsessions.UserTable,
			Columns: []string{loginsessions.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LoginSessionsCreateBulk is the builder for creating many LoginSessions entities in bulk.
type LoginSessionsCreateBulk struct {
	config
	builders []*LoginSessionsCreate
}

// Save creates the LoginSessions entities in the database.
func (lscb *LoginSessionsCreateBulk) Save(ctx context.Context) ([]*LoginSessions, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lscb.builders))
	nodes := make([]*LoginSessions, len(lscb.builders))
	mutators := make([]Mutator, len(lscb.builders))
	for i := range lscb.builders {
		func(i int, root context.Context) {
			builder := lscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LoginSessionsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lscb *LoginSessionsCreateBulk) SaveX(ctx context.Context) []*LoginSessions {
	v, err := lscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lscb *LoginSessionsCreateBulk) Exec(ctx context.Context) error {
	_, err := lscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lscb *LoginSessionsCreateBulk) ExecX(ctx context.Context) {
	if err := lscb.Exec(ctx); err != nil {
		panic(err)
	}
}
