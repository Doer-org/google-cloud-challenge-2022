/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/e-states": {
    /**
     * List EStates 
     * @description List EStates.
     */
    get: operations["listEState"];
    /**
     * Create a new EState 
     * @description Creates a new EState and persists it to storage.
     */
    post: operations["createEState"];
  };
  "/e-states/{id}": {
    /**
     * Find a EState by ID 
     * @description Finds the EState with the requested ID and returns it.
     */
    get: operations["readEState"];
    /**
     * Deletes a EState by ID 
     * @description Deletes the EState with the requested ID.
     */
    delete: operations["deleteEState"];
    /**
     * Updates a EState 
     * @description Updates a EState and persists changes to storage.
     */
    patch: operations["updateEState"];
  };
  "/e-states/{id}/event": {
    /**
     * Find the attached Event 
     * @description Find the attached Event of the EState with the given ID
     */
    get: operations["readEStateEvent"];
  };
  "/e-types": {
    /**
     * List ETypes 
     * @description List ETypes.
     */
    get: operations["listEType"];
    /**
     * Create a new EType 
     * @description Creates a new EType and persists it to storage.
     */
    post: operations["createEType"];
  };
  "/e-types/{id}": {
    /**
     * Find a EType by ID 
     * @description Finds the EType with the requested ID and returns it.
     */
    get: operations["readEType"];
    /**
     * Deletes a EType by ID 
     * @description Deletes the EType with the requested ID.
     */
    delete: operations["deleteEType"];
    /**
     * Updates a EType 
     * @description Updates a EType and persists changes to storage.
     */
    patch: operations["updateEType"];
  };
  "/e-types/{id}/event": {
    /**
     * Find the attached Event 
     * @description Find the attached Event of the EType with the given ID
     */
    get: operations["readETypeEvent"];
  };
  "/events": {
    /**
     * List Events 
     * @description List Events.
     */
    get: operations["listEvent"];
    /**
     * Create a new Event 
     * @description Creates a new Event and persists it to storage.
     */
    post: operations["createEvent"];
  };
  "/events/{id}": {
    /**
     * Find a Event by ID 
     * @description Finds the Event with the requested ID and returns it.
     */
    get: operations["readEvent"];
    /**
     * Deletes a Event by ID 
     * @description Deletes the Event with the requested ID.
     */
    delete: operations["deleteEvent"];
    /**
     * Updates a Event 
     * @description Updates a Event and persists changes to storage.
     */
    patch: operations["updateEvent"];
  };
  "/events/{id}/state": {
    /**
     * Find the attached EState 
     * @description Find the attached EState of the Event with the given ID
     */
    get: operations["readEventState"];
  };
  "/events/{id}/type": {
    /**
     * Find the attached EType 
     * @description Find the attached EType of the Event with the given ID
     */
    get: operations["readEventType"];
  };
  "/events/{id}/users": {
    /**
     * List attached Users 
     * @description List attached Users.
     */
    get: operations["listEventUsers"];
  };
  "/users": {
    /**
     * List Users 
     * @description List Users.
     */
    get: operations["listUser"];
    /**
     * Create a new User 
     * @description Creates a new User and persists it to storage.
     */
    post: operations["createUser"];
  };
  "/users/{id}": {
    /**
     * Find a User by ID 
     * @description Finds the User with the requested ID and returns it.
     */
    get: operations["readUser"];
    /**
     * Deletes a User by ID 
     * @description Deletes the User with the requested ID.
     */
    delete: operations["deleteUser"];
    /**
     * Updates a User 
     * @description Updates a User and persists changes to storage.
     */
    patch: operations["updateUser"];
  };
  "/users/{id}/events": {
    /**
     * List attached Events 
     * @description List attached Events.
     */
    get: operations["listUserEvents"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    EState: {
      id: number;
      name: string;
      event: components["schemas"]["Event"];
    };
    EStateCreate: {
      id: number;
      name: string;
    };
    EStateList: {
      id: number;
      name: string;
    };
    EStateRead: {
      id: number;
      name: string;
    };
    EStateUpdate: {
      id: number;
      name: string;
    };
    EState_EventRead: {
      id: number;
      name: string;
      detail: string;
      location: string;
    };
    EType: {
      id: number;
      name: string;
      event: components["schemas"]["Event"];
    };
    ETypeCreate: {
      id: number;
      name: string;
    };
    ETypeList: {
      id: number;
      name: string;
    };
    ETypeRead: {
      id: number;
      name: string;
    };
    ETypeUpdate: {
      id: number;
      name: string;
    };
    EType_EventRead: {
      id: number;
      name: string;
      detail: string;
      location: string;
    };
    Event: {
      id: number;
      name: string;
      detail: string;
      location: string;
      state?: components["schemas"]["EState"];
      type?: components["schemas"]["EType"];
      users?: (components["schemas"]["User"])[];
    };
    EventCreate: {
      id: number;
      name: string;
      detail: string;
      location: string;
    };
    EventList: {
      id: number;
      name: string;
      detail: string;
      location: string;
    };
    EventRead: {
      id: number;
      name: string;
      detail: string;
      location: string;
    };
    EventUpdate: {
      id: number;
      name: string;
      detail: string;
      location: string;
    };
    Event_StateRead: {
      id: number;
      name: string;
    };
    Event_TypeRead: {
      id: number;
      name: string;
    };
    Event_UsersList: {
      id: number;
      age: number;
      name: string;
      authenticated: boolean;
      gmail: string;
      icon_img: string;
    };
    User: {
      id: number;
      age: number;
      name: string;
      authenticated: boolean;
      gmail: string;
      icon_img: string;
      events?: (components["schemas"]["Event"])[];
    };
    UserCreate: {
      id: number;
      age: number;
      name: string;
      authenticated: boolean;
      gmail: string;
      icon_img: string;
    };
    UserList: {
      id: number;
      age: number;
      name: string;
      authenticated: boolean;
      gmail: string;
      icon_img: string;
    };
    UserRead: {
      id: number;
      age: number;
      name: string;
      authenticated: boolean;
      gmail: string;
      icon_img: string;
    };
    UserUpdate: {
      id: number;
      age: number;
      name: string;
      authenticated: boolean;
      gmail: string;
      icon_img: string;
    };
    User_EventsList: {
      id: number;
      name: string;
      detail: string;
      location: string;
    };
  };
  responses: {
    /** @description invalid input, data invalid */
    400: {
      content: {
        "application/json": {
          code: number;
          status: string;
          errors?: Record<string, never>;
        };
      };
    };
    /** @description insufficient permissions */
    403: {
      content: {
        "application/json": {
          code: number;
          status: string;
          errors?: Record<string, never>;
        };
      };
    };
    /** @description resource not found */
    404: {
      content: {
        "application/json": {
          code: number;
          status: string;
          errors?: Record<string, never>;
        };
      };
    };
    /** @description conflicting resources */
    409: {
      content: {
        "application/json": {
          code: number;
          status: string;
          errors?: Record<string, never>;
        };
      };
    };
    /** @description unexpected error */
    500: {
      content: {
        "application/json": {
          code: number;
          status: string;
          errors?: Record<string, never>;
        };
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  listEState: {
    /**
     * List EStates 
     * @description List EStates.
     */
    parameters?: {
        /** @description what page to render */
        /** @description item count to render per page */
      query?: {
        page?: number;
        itemsPerPage?: number;
      };
    };
    responses: {
      /** @description result EState list */
      200: {
        content: {
          "application/json": (components["schemas"]["EStateList"])[];
        };
      };
      400: components["responses"]["400"];
      404: components["responses"]["404"];
      409: components["responses"]["409"];
      500: components["responses"]["500"];
    };
  };
  createEState: {
    /**
     * Create a new EState 
     * @description Creates a new EState and persists it to storage.
     */
    /** @description EState to create */
    requestBody: {
      content: {
        "application/json": {
          name: string;
          event: number;
        };
      };
    };
    responses: {
      /** @description EState created */
      200: {
        content: {
          "application/json": components["schemas"]["EStateCreate"];
        };
      };
      400: components["responses"]["400"];
      409: components["responses"]["409"];
      500: components["responses"]["500"];
    };
  };
  readEState: {
    /**
     * Find a EState by ID 
     * @description Finds the EState with the requested ID and returns it.
     */
    parameters: {
        /** @description ID of the EState */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description EState with requested ID was found */
      200: {
        content: {
          "application/json": components["schemas"]["EStateRead"];
        };
      };
      400: components["responses"]["400"];
      404: components["responses"]["404"];
      409: components["responses"]["409"];
      500: components["responses"]["500"];
    };
  };
  deleteEState: {
    /**
     * Deletes a EState by ID 
     * @description Deletes the EState with the requested ID.
     */
    parameters: {
        /** @description ID of the EState */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description EState with requested ID was deleted */
      204: never;
      400: components["responses"]["400"];
      404: components["responses"]["404"];
      409: components["responses"]["409"];
      500: components["responses"]["500"];
    };
  };
  updateEState: {
    /**
     * Updates a EState 
     * @description Updates a EState and persists changes to storage.
     */
    parameters: {
        /** @description ID of the EState */
      path: {
        id: number;
      };
    };
    /** @description EState properties to update */
    requestBody: {
      content: {
        "application/json": {
          name?: string;
          event?: number;
        };
      };
    };
    responses: {
      /** @description EState updated */
      200: {
        content: {
          "application/json": components["schemas"]["EStateUpdate"];
        };
      };
      400: components["responses"]["400"];
      404: components["responses"]["404"];
      409: components["responses"]["409"];
      500: components["responses"]["500"];
    };
  };
  readEStateEvent: {
    /**
     * Find the attached Event 
     * @description Find the attached Event of the EState with the given ID
     */
    parameters: {
        /** @description ID of the EState */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Event attached to EState with requested ID was found */
      200: {
        content: {
          "application/json": components["schemas"]["EState_EventRead"];
        };
      };
      400: components["responses"]["400"];
      404: components["responses"]["404"];
      409: components["responses"]["409"];
      500: components["responses"]["500"];
    };
  };
  listEType: {
    /**
     * List ETypes 
     * @description List ETypes.
     */
    parameters?: {
        /** @description what page to render */
        /** @description item count to render per page */
      query?: {
        page?: number;
        itemsPerPage?: number;
      };
    };
    responses: {
      /** @description result EType list */
      200: {
        content: {
          "application/json": (components["schemas"]["ETypeList"])[];
        };
      };
      400: components["responses"]["400"];
      404: components["responses"]["404"];
      409: components["responses"]["409"];
      500: components["responses"]["500"];
    };
  };
  createEType: {
    /**
     * Create a new EType 
     * @description Creates a new EType and persists it to storage.
     */
    /** @description EType to create */
    requestBody: {
      content: {
        "application/json": {
          name: string;
          event: number;
        };
      };
    };
    responses: {
      /** @description EType created */
      200: {
        content: {
          "application/json": components["schemas"]["ETypeCreate"];
        };
      };
      400: components["responses"]["400"];
      409: components["responses"]["409"];
      500: components["responses"]["500"];
    };
  };
  readEType: {
    /**
     * Find a EType by ID 
     * @description Finds the EType with the requested ID and returns it.
     */
    parameters: {
        /** @description ID of the EType */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description EType with requested ID was found */
      200: {
        content: {
          "application/json": components["schemas"]["ETypeRead"];
        };
      };
      400: components["responses"]["400"];
      404: components["responses"]["404"];
      409: components["responses"]["409"];
      500: components["responses"]["500"];
    };
  };
  deleteEType: {
    /**
     * Deletes a EType by ID 
     * @description Deletes the EType with the requested ID.
     */
    parameters: {
        /** @description ID of the EType */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description EType with requested ID was deleted */
      204: never;
      400: components["responses"]["400"];
      404: components["responses"]["404"];
      409: components["responses"]["409"];
      500: components["responses"]["500"];
    };
  };
  updateEType: {
    /**
     * Updates a EType 
     * @description Updates a EType and persists changes to storage.
     */
    parameters: {
        /** @description ID of the EType */
      path: {
        id: number;
      };
    };
    /** @description EType properties to update */
    requestBody: {
      content: {
        "application/json": {
          name?: string;
          event?: number;
        };
      };
    };
    responses: {
      /** @description EType updated */
      200: {
        content: {
          "application/json": components["schemas"]["ETypeUpdate"];
        };
      };
      400: components["responses"]["400"];
      404: components["responses"]["404"];
      409: components["responses"]["409"];
      500: components["responses"]["500"];
    };
  };
  readETypeEvent: {
    /**
     * Find the attached Event 
     * @description Find the attached Event of the EType with the given ID
     */
    parameters: {
        /** @description ID of the EType */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Event attached to EType with requested ID was found */
      200: {
        content: {
          "application/json": components["schemas"]["EType_EventRead"];
        };
      };
      400: components["responses"]["400"];
      404: components["responses"]["404"];
      409: components["responses"]["409"];
      500: components["responses"]["500"];
    };
  };
  listEvent: {
    /**
     * List Events 
     * @description List Events.
     */
    parameters?: {
        /** @description what page to render */
        /** @description item count to render per page */
      query?: {
        page?: number;
        itemsPerPage?: number;
      };
    };
    responses: {
      /** @description result Event list */
      200: {
        content: {
          "application/json": (components["schemas"]["EventList"])[];
        };
      };
      400: components["responses"]["400"];
      404: components["responses"]["404"];
      409: components["responses"]["409"];
      500: components["responses"]["500"];
    };
  };
  createEvent: {
    /**
     * Create a new Event 
     * @description Creates a new Event and persists it to storage.
     */
    /** @description Event to create */
    requestBody: {
      content: {
        "application/json": {
          name: string;
          detail: string;
          location: string;
          state?: number;
          type?: number;
          users?: (number)[];
        };
      };
    };
    responses: {
      /** @description Event created */
      200: {
        content: {
          "application/json": components["schemas"]["EventCreate"];
        };
      };
      400: components["responses"]["400"];
      409: components["responses"]["409"];
      500: components["responses"]["500"];
    };
  };
  readEvent: {
    /**
     * Find a Event by ID 
     * @description Finds the Event with the requested ID and returns it.
     */
    parameters: {
        /** @description ID of the Event */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Event with requested ID was found */
      200: {
        content: {
          "application/json": components["schemas"]["EventRead"];
        };
      };
      400: components["responses"]["400"];
      404: components["responses"]["404"];
      409: components["responses"]["409"];
      500: components["responses"]["500"];
    };
  };
  deleteEvent: {
    /**
     * Deletes a Event by ID 
     * @description Deletes the Event with the requested ID.
     */
    parameters: {
        /** @description ID of the Event */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Event with requested ID was deleted */
      204: never;
      400: components["responses"]["400"];
      404: components["responses"]["404"];
      409: components["responses"]["409"];
      500: components["responses"]["500"];
    };
  };
  updateEvent: {
    /**
     * Updates a Event 
     * @description Updates a Event and persists changes to storage.
     */
    parameters: {
        /** @description ID of the Event */
      path: {
        id: number;
      };
    };
    /** @description Event properties to update */
    requestBody: {
      content: {
        "application/json": {
          name?: string;
          detail?: string;
          location?: string;
          state?: number;
          type?: number;
          users?: (number)[];
        };
      };
    };
    responses: {
      /** @description Event updated */
      200: {
        content: {
          "application/json": components["schemas"]["EventUpdate"];
        };
      };
      400: components["responses"]["400"];
      404: components["responses"]["404"];
      409: components["responses"]["409"];
      500: components["responses"]["500"];
    };
  };
  readEventState: {
    /**
     * Find the attached EState 
     * @description Find the attached EState of the Event with the given ID
     */
    parameters: {
        /** @description ID of the Event */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description EState attached to Event with requested ID was found */
      200: {
        content: {
          "application/json": components["schemas"]["Event_StateRead"];
        };
      };
      400: components["responses"]["400"];
      404: components["responses"]["404"];
      409: components["responses"]["409"];
      500: components["responses"]["500"];
    };
  };
  readEventType: {
    /**
     * Find the attached EType 
     * @description Find the attached EType of the Event with the given ID
     */
    parameters: {
        /** @description ID of the Event */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description EType attached to Event with requested ID was found */
      200: {
        content: {
          "application/json": components["schemas"]["Event_TypeRead"];
        };
      };
      400: components["responses"]["400"];
      404: components["responses"]["404"];
      409: components["responses"]["409"];
      500: components["responses"]["500"];
    };
  };
  listEventUsers: {
    /**
     * List attached Users 
     * @description List attached Users.
     */
    parameters: {
        /** @description what page to render */
        /** @description item count to render per page */
      query?: {
        page?: number;
        itemsPerPage?: number;
      };
        /** @description ID of the Event */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description result Events list */
      200: {
        content: {
          "application/json": (components["schemas"]["Event_UsersList"])[];
        };
      };
      400: components["responses"]["400"];
      404: components["responses"]["404"];
      409: components["responses"]["409"];
      500: components["responses"]["500"];
    };
  };
  listUser: {
    /**
     * List Users 
     * @description List Users.
     */
    parameters?: {
        /** @description what page to render */
        /** @description item count to render per page */
      query?: {
        page?: number;
        itemsPerPage?: number;
      };
    };
    responses: {
      /** @description result User list */
      200: {
        content: {
          "application/json": (components["schemas"]["UserList"])[];
        };
      };
      400: components["responses"]["400"];
      404: components["responses"]["404"];
      409: components["responses"]["409"];
      500: components["responses"]["500"];
    };
  };
  createUser: {
    /**
     * Create a new User 
     * @description Creates a new User and persists it to storage.
     */
    /** @description User to create */
    requestBody: {
      content: {
        "application/json": {
          age: number;
          name: string;
          authenticated: boolean;
          gmail: string;
          icon_img: string;
          events?: (number)[];
        };
      };
    };
    responses: {
      /** @description User created */
      200: {
        content: {
          "application/json": components["schemas"]["UserCreate"];
        };
      };
      400: components["responses"]["400"];
      409: components["responses"]["409"];
      500: components["responses"]["500"];
    };
  };
  readUser: {
    /**
     * Find a User by ID 
     * @description Finds the User with the requested ID and returns it.
     */
    parameters: {
        /** @description ID of the User */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description User with requested ID was found */
      200: {
        content: {
          "application/json": components["schemas"]["UserRead"];
        };
      };
      400: components["responses"]["400"];
      404: components["responses"]["404"];
      409: components["responses"]["409"];
      500: components["responses"]["500"];
    };
  };
  deleteUser: {
    /**
     * Deletes a User by ID 
     * @description Deletes the User with the requested ID.
     */
    parameters: {
        /** @description ID of the User */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description User with requested ID was deleted */
      204: never;
      400: components["responses"]["400"];
      404: components["responses"]["404"];
      409: components["responses"]["409"];
      500: components["responses"]["500"];
    };
  };
  updateUser: {
    /**
     * Updates a User 
     * @description Updates a User and persists changes to storage.
     */
    parameters: {
        /** @description ID of the User */
      path: {
        id: number;
      };
    };
    /** @description User properties to update */
    requestBody: {
      content: {
        "application/json": {
          age?: number;
          name?: string;
          authenticated?: boolean;
          gmail?: string;
          icon_img?: string;
          events?: (number)[];
        };
      };
    };
    responses: {
      /** @description User updated */
      200: {
        content: {
          "application/json": components["schemas"]["UserUpdate"];
        };
      };
      400: components["responses"]["400"];
      404: components["responses"]["404"];
      409: components["responses"]["409"];
      500: components["responses"]["500"];
    };
  };
  listUserEvents: {
    /**
     * List attached Events 
     * @description List attached Events.
     */
    parameters: {
        /** @description what page to render */
        /** @description item count to render per page */
      query?: {
        page?: number;
        itemsPerPage?: number;
      };
        /** @description ID of the User */
      path: {
        id: number;
      };
    };
    responses: {
      /** @description result Users list */
      200: {
        content: {
          "application/json": (components["schemas"]["User_EventsList"])[];
        };
      };
      400: components["responses"]["400"];
      404: components["responses"]["404"];
      409: components["responses"]["409"];
      500: components["responses"]["500"];
    };
  };
}
