// Code generated by ent, DO NOT EDIT.

package ogent

import "github.com/Doer-org/google-cloud-challenge-2022/infrastructure/ent"

func NewCommentCreate(e *ent.Comment) *CommentCreate {
	if e == nil {
		return nil
	}
	var ret CommentCreate
	ret.ID = e.ID
	ret.Body = e.Body
	return &ret
}

func NewCommentCreates(es []*ent.Comment) []CommentCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]CommentCreate, len(es))
	for i, e := range es {
		r[i] = NewCommentCreate(e).Elem()
	}
	return r
}

func (c *CommentCreate) Elem() CommentCreate {
	if c == nil {
		return CommentCreate{}
	}
	return *c
}

func NewCommentList(e *ent.Comment) *CommentList {
	if e == nil {
		return nil
	}
	var ret CommentList
	ret.ID = e.ID
	ret.Body = e.Body
	return &ret
}

func NewCommentLists(es []*ent.Comment) []CommentList {
	if len(es) == 0 {
		return nil
	}
	r := make([]CommentList, len(es))
	for i, e := range es {
		r[i] = NewCommentList(e).Elem()
	}
	return r
}

func (c *CommentList) Elem() CommentList {
	if c == nil {
		return CommentList{}
	}
	return *c
}

func NewCommentRead(e *ent.Comment) *CommentRead {
	if e == nil {
		return nil
	}
	var ret CommentRead
	ret.ID = e.ID
	ret.Body = e.Body
	return &ret
}

func NewCommentReads(es []*ent.Comment) []CommentRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]CommentRead, len(es))
	for i, e := range es {
		r[i] = NewCommentRead(e).Elem()
	}
	return r
}

func (c *CommentRead) Elem() CommentRead {
	if c == nil {
		return CommentRead{}
	}
	return *c
}

func NewCommentUpdate(e *ent.Comment) *CommentUpdate {
	if e == nil {
		return nil
	}
	var ret CommentUpdate
	ret.ID = e.ID
	ret.Body = e.Body
	return &ret
}

func NewCommentUpdates(es []*ent.Comment) []CommentUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]CommentUpdate, len(es))
	for i, e := range es {
		r[i] = NewCommentUpdate(e).Elem()
	}
	return r
}

func (c *CommentUpdate) Elem() CommentUpdate {
	if c == nil {
		return CommentUpdate{}
	}
	return *c
}

func NewCommentEventRead(e *ent.Event) *CommentEventRead {
	if e == nil {
		return nil
	}
	var ret CommentEventRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Detail = NewOptString(e.Detail)
	ret.Location = NewOptString(e.Location)
	ret.Type = e.Type
	ret.State = e.State
	return &ret
}

func NewCommentEventReads(es []*ent.Event) []CommentEventRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]CommentEventRead, len(es))
	for i, e := range es {
		r[i] = NewCommentEventRead(e).Elem()
	}
	return r
}

func (e *CommentEventRead) Elem() CommentEventRead {
	if e == nil {
		return CommentEventRead{}
	}
	return *e
}

func NewCommentUserRead(e *ent.User) *CommentUserRead {
	if e == nil {
		return nil
	}
	var ret CommentUserRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Authenticated = e.Authenticated
	ret.Mail = NewOptString(e.Mail)
	ret.Icon = e.Icon
	return &ret
}

func NewCommentUserReads(es []*ent.User) []CommentUserRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]CommentUserRead, len(es))
	for i, e := range es {
		r[i] = NewCommentUserRead(e).Elem()
	}
	return r
}

func (u *CommentUserRead) Elem() CommentUserRead {
	if u == nil {
		return CommentUserRead{}
	}
	return *u
}

func NewEventCreate(e *ent.Event) *EventCreate {
	if e == nil {
		return nil
	}
	var ret EventCreate
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Detail = NewOptString(e.Detail)
	ret.Location = NewOptString(e.Location)
	ret.Type = e.Type
	ret.State = e.State
	return &ret
}

func NewEventCreates(es []*ent.Event) []EventCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]EventCreate, len(es))
	for i, e := range es {
		r[i] = NewEventCreate(e).Elem()
	}
	return r
}

func (e *EventCreate) Elem() EventCreate {
	if e == nil {
		return EventCreate{}
	}
	return *e
}

func NewEventList(e *ent.Event) *EventList {
	if e == nil {
		return nil
	}
	var ret EventList
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Detail = NewOptString(e.Detail)
	ret.Location = NewOptString(e.Location)
	ret.Type = e.Type
	ret.State = e.State
	return &ret
}

func NewEventLists(es []*ent.Event) []EventList {
	if len(es) == 0 {
		return nil
	}
	r := make([]EventList, len(es))
	for i, e := range es {
		r[i] = NewEventList(e).Elem()
	}
	return r
}

func (e *EventList) Elem() EventList {
	if e == nil {
		return EventList{}
	}
	return *e
}

func NewEventRead(e *ent.Event) *EventRead {
	if e == nil {
		return nil
	}
	var ret EventRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Detail = NewOptString(e.Detail)
	ret.Location = NewOptString(e.Location)
	ret.Type = e.Type
	ret.State = e.State
	return &ret
}

func NewEventReads(es []*ent.Event) []EventRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]EventRead, len(es))
	for i, e := range es {
		r[i] = NewEventRead(e).Elem()
	}
	return r
}

func (e *EventRead) Elem() EventRead {
	if e == nil {
		return EventRead{}
	}
	return *e
}

func NewEventUpdate(e *ent.Event) *EventUpdate {
	if e == nil {
		return nil
	}
	var ret EventUpdate
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Detail = NewOptString(e.Detail)
	ret.Location = NewOptString(e.Location)
	ret.Type = e.Type
	ret.State = e.State
	return &ret
}

func NewEventUpdates(es []*ent.Event) []EventUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]EventUpdate, len(es))
	for i, e := range es {
		r[i] = NewEventUpdate(e).Elem()
	}
	return r
}

func (e *EventUpdate) Elem() EventUpdate {
	if e == nil {
		return EventUpdate{}
	}
	return *e
}

func NewEventAdminRead(e *ent.User) *EventAdminRead {
	if e == nil {
		return nil
	}
	var ret EventAdminRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Authenticated = e.Authenticated
	ret.Mail = NewOptString(e.Mail)
	ret.Icon = e.Icon
	return &ret
}

func NewEventAdminReads(es []*ent.User) []EventAdminRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]EventAdminRead, len(es))
	for i, e := range es {
		r[i] = NewEventAdminRead(e).Elem()
	}
	return r
}

func (u *EventAdminRead) Elem() EventAdminRead {
	if u == nil {
		return EventAdminRead{}
	}
	return *u
}

func NewEventUsersList(e *ent.User) *EventUsersList {
	if e == nil {
		return nil
	}
	var ret EventUsersList
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Authenticated = e.Authenticated
	ret.Mail = NewOptString(e.Mail)
	ret.Icon = e.Icon
	return &ret
}

func NewEventUsersLists(es []*ent.User) []EventUsersList {
	if len(es) == 0 {
		return nil
	}
	r := make([]EventUsersList, len(es))
	for i, e := range es {
		r[i] = NewEventUsersList(e).Elem()
	}
	return r
}

func (u *EventUsersList) Elem() EventUsersList {
	if u == nil {
		return EventUsersList{}
	}
	return *u
}

func NewUserCreate(e *ent.User) *UserCreate {
	if e == nil {
		return nil
	}
	var ret UserCreate
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Authenticated = e.Authenticated
	ret.Mail = NewOptString(e.Mail)
	ret.Icon = e.Icon
	return &ret
}

func NewUserCreates(es []*ent.User) []UserCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]UserCreate, len(es))
	for i, e := range es {
		r[i] = NewUserCreate(e).Elem()
	}
	return r
}

func (u *UserCreate) Elem() UserCreate {
	if u == nil {
		return UserCreate{}
	}
	return *u
}

func NewUserList(e *ent.User) *UserList {
	if e == nil {
		return nil
	}
	var ret UserList
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Authenticated = e.Authenticated
	ret.Mail = NewOptString(e.Mail)
	ret.Icon = e.Icon
	return &ret
}

func NewUserLists(es []*ent.User) []UserList {
	if len(es) == 0 {
		return nil
	}
	r := make([]UserList, len(es))
	for i, e := range es {
		r[i] = NewUserList(e).Elem()
	}
	return r
}

func (u *UserList) Elem() UserList {
	if u == nil {
		return UserList{}
	}
	return *u
}

func NewUserRead(e *ent.User) *UserRead {
	if e == nil {
		return nil
	}
	var ret UserRead
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Authenticated = e.Authenticated
	ret.Mail = NewOptString(e.Mail)
	ret.Icon = e.Icon
	return &ret
}

func NewUserReads(es []*ent.User) []UserRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]UserRead, len(es))
	for i, e := range es {
		r[i] = NewUserRead(e).Elem()
	}
	return r
}

func (u *UserRead) Elem() UserRead {
	if u == nil {
		return UserRead{}
	}
	return *u
}

func NewUserUpdate(e *ent.User) *UserUpdate {
	if e == nil {
		return nil
	}
	var ret UserUpdate
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Authenticated = e.Authenticated
	ret.Mail = NewOptString(e.Mail)
	ret.Icon = e.Icon
	return &ret
}

func NewUserUpdates(es []*ent.User) []UserUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]UserUpdate, len(es))
	for i, e := range es {
		r[i] = NewUserUpdate(e).Elem()
	}
	return r
}

func (u *UserUpdate) Elem() UserUpdate {
	if u == nil {
		return UserUpdate{}
	}
	return *u
}

func NewUserEventsList(e *ent.Event) *UserEventsList {
	if e == nil {
		return nil
	}
	var ret UserEventsList
	ret.ID = e.ID
	ret.Name = e.Name
	ret.Detail = NewOptString(e.Detail)
	ret.Location = NewOptString(e.Location)
	ret.Type = e.Type
	ret.State = e.State
	return &ret
}

func NewUserEventsLists(es []*ent.Event) []UserEventsList {
	if len(es) == 0 {
		return nil
	}
	r := make([]UserEventsList, len(es))
	for i, e := range es {
		r[i] = NewUserEventsList(e).Elem()
	}
	return r
}

func (e *UserEventsList) Elem() UserEventsList {
	if e == nil {
		return UserEventsList{}
	}
	return *e
}
