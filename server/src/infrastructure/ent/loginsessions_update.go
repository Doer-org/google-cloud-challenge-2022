// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Doer-org/google-cloud-challenge-2022/infrastructure/ent/loginsessions"
	"github.com/Doer-org/google-cloud-challenge-2022/infrastructure/ent/predicate"
	"github.com/Doer-org/google-cloud-challenge-2022/infrastructure/ent/user"
	"github.com/google/uuid"
)

// LoginSessionsUpdate is the builder for updating LoginSessions entities.
type LoginSessionsUpdate struct {
	config
	hooks    []Hook
	mutation *LoginSessionsMutation
}

// Where appends a list predicates to the LoginSessionsUpdate builder.
func (lsu *LoginSessionsUpdate) Where(ps ...predicate.LoginSessions) *LoginSessionsUpdate {
	lsu.mutation.Where(ps...)
	return lsu
}

// SetUserID sets the "user_id" field.
func (lsu *LoginSessionsUpdate) SetUserID(u uuid.UUID) *LoginSessionsUpdate {
	lsu.mutation.SetUserID(u)
	return lsu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (lsu *LoginSessionsUpdate) SetNillableUserID(u *uuid.UUID) *LoginSessionsUpdate {
	if u != nil {
		lsu.SetUserID(*u)
	}
	return lsu
}

// SetUser sets the "user" edge to the User entity.
func (lsu *LoginSessionsUpdate) SetUser(u *User) *LoginSessionsUpdate {
	return lsu.SetUserID(u.ID)
}

// Mutation returns the LoginSessionsMutation object of the builder.
func (lsu *LoginSessionsUpdate) Mutation() *LoginSessionsMutation {
	return lsu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (lsu *LoginSessionsUpdate) ClearUser() *LoginSessionsUpdate {
	lsu.mutation.ClearUser()
	return lsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lsu *LoginSessionsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(lsu.hooks) == 0 {
		if err = lsu.check(); err != nil {
			return 0, err
		}
		affected, err = lsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LoginSessionsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lsu.check(); err != nil {
				return 0, err
			}
			lsu.mutation = mutation
			affected, err = lsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(lsu.hooks) - 1; i >= 0; i-- {
			if lsu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (lsu *LoginSessionsUpdate) SaveX(ctx context.Context) int {
	affected, err := lsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lsu *LoginSessionsUpdate) Exec(ctx context.Context) error {
	_, err := lsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lsu *LoginSessionsUpdate) ExecX(ctx context.Context) {
	if err := lsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lsu *LoginSessionsUpdate) check() error {
	if _, ok := lsu.mutation.UserID(); lsu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "LoginSessions.user"`)
	}
	return nil
}

func (lsu *LoginSessionsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   loginsessions.Table,
			Columns: loginsessions.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: loginsessions.FieldID,
			},
		},
	}
	if ps := lsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if lsu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   loginsessions.UserTable,
			Columns: []string{loginsessions.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lsu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   loginsessions.UserTable,
			Columns: []string{loginsessions.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loginsessions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// LoginSessionsUpdateOne is the builder for updating a single LoginSessions entity.
type LoginSessionsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LoginSessionsMutation
}

// SetUserID sets the "user_id" field.
func (lsuo *LoginSessionsUpdateOne) SetUserID(u uuid.UUID) *LoginSessionsUpdateOne {
	lsuo.mutation.SetUserID(u)
	return lsuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (lsuo *LoginSessionsUpdateOne) SetNillableUserID(u *uuid.UUID) *LoginSessionsUpdateOne {
	if u != nil {
		lsuo.SetUserID(*u)
	}
	return lsuo
}

// SetUser sets the "user" edge to the User entity.
func (lsuo *LoginSessionsUpdateOne) SetUser(u *User) *LoginSessionsUpdateOne {
	return lsuo.SetUserID(u.ID)
}

// Mutation returns the LoginSessionsMutation object of the builder.
func (lsuo *LoginSessionsUpdateOne) Mutation() *LoginSessionsMutation {
	return lsuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (lsuo *LoginSessionsUpdateOne) ClearUser() *LoginSessionsUpdateOne {
	lsuo.mutation.ClearUser()
	return lsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lsuo *LoginSessionsUpdateOne) Select(field string, fields ...string) *LoginSessionsUpdateOne {
	lsuo.fields = append([]string{field}, fields...)
	return lsuo
}

// Save executes the query and returns the updated LoginSessions entity.
func (lsuo *LoginSessionsUpdateOne) Save(ctx context.Context) (*LoginSessions, error) {
	var (
		err  error
		node *LoginSessions
	)
	if len(lsuo.hooks) == 0 {
		if err = lsuo.check(); err != nil {
			return nil, err
		}
		node, err = lsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LoginSessionsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lsuo.check(); err != nil {
				return nil, err
			}
			lsuo.mutation = mutation
			node, err = lsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(lsuo.hooks) - 1; i >= 0; i-- {
			if lsuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lsuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, lsuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*LoginSessions)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from LoginSessionsMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (lsuo *LoginSessionsUpdateOne) SaveX(ctx context.Context) *LoginSessions {
	node, err := lsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lsuo *LoginSessionsUpdateOne) Exec(ctx context.Context) error {
	_, err := lsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lsuo *LoginSessionsUpdateOne) ExecX(ctx context.Context) {
	if err := lsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lsuo *LoginSessionsUpdateOne) check() error {
	if _, ok := lsuo.mutation.UserID(); lsuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "LoginSessions.user"`)
	}
	return nil
}

func (lsuo *LoginSessionsUpdateOne) sqlSave(ctx context.Context) (_node *LoginSessions, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   loginsessions.Table,
			Columns: loginsessions.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: loginsessions.FieldID,
			},
		},
	}
	id, ok := lsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LoginSessions.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, loginsessions.FieldID)
		for _, f := range fields {
			if !loginsessions.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != loginsessions.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if lsuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   loginsessions.UserTable,
			Columns: []string{loginsessions.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lsuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   loginsessions.UserTable,
			Columns: []string{loginsessions.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LoginSessions{config: lsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loginsessions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
